query,context_text,context_time_ms,response_text,response_time_ms,db_time_ms,similarity_results,explanation,conclusion,result
Is there any mention of minimizing the total number of deployed environments?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.

The group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.

---

Consistency: Messages should be delivered in the order they were sent.
Availability: The system should be highly available. However, the availability can be compromised in the interest of consistency.
Security: The system must be secure via end-to-end encryption. The end-to-end encryption ensures that only the two communicating parties can see the content of messages. Nobody in between, not even WhatsApp, should have access.
Scalability: The system should be highly scalable to support an ever-increasing number of users and messages per day.
Capacity Estimation
Storage Estimation:
100 billion messages are shared through WhatsApp per day and each message takes 100 bytes on average
100 billion/day∗100 Bytes = 10 TB/day
For 30 days, the storage capacity would become the following:",4.493446350097656," Response: No
Judgement: <No>
Explanation: The context discusses aspects related to scalability and deployment across multiple servers or data centers but does not specifically address minimizing the total number of deployed environments. It mentions using microservices architecture, deploying on a cluster for low latency, maintaining geographically distributed replicas along with Redis cache - all aimed at scaling up resources rather than reducing them.",24.007046461105347,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.\n\nThe group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:15'}), Document(page_content='Consistency: Messages should be delivered in the order they were sent.\nAvailability: The system should be highly available. However, the availability can be compromised in the interest of consistency.\nSecurity: The system must be secure via end-to-end encryption. The end-to-end encryption ensures that only the two communicating parties can see the content of messages. Nobody in between, not even WhatsApp, should have access.\nScalability: The system should be highly scalable to support an ever-increasing number of users and messages per day.\nCapacity Estimation\nStorage Estimation:\n100 billion messages are shared through WhatsApp per day and each message takes 100 bytes on average\n100 billion/day∗100 Bytes = 10 TB/day\nFor 30 days, the storage capacity would become the following:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:3'})]","The context discusses aspects related to scalability and deployment across multiple servers or data centers but does not specifically address minimizing the total number of deployed environments. It mentions using microservices architecture, deploying on a cluster for low latency, maintaining geographically distributed replicas along with Redis cache - all aimed at scaling up resources rather than reducing them.",No,No
Is there any mention of optimizing storage utilization?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.",7.37173867225647," Response: No

Explanation: The context provided does not discuss or address optimization strategies for improving how much data is stored on servers; it only mentions bandwidth requirements and server capacity estimates without suggesting methods to optimize these.",18.350844383239743,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'})]",The context provided does not discuss or address optimization strategies for improving how much data is stored on servers; it only mentions bandwidth requirements and server capacity estimates without suggesting methods to optimize these.,No,No
Is there any mention of optimizing average CPU utilization?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

Consistency: Messages should be delivered in the order they were sent.
Availability: The system should be highly available. However, the availability can be compromised in the interest of consistency.
Security: The system must be secure via end-to-end encryption. The end-to-end encryption ensures that only the two communicating parties can see the content of messages. Nobody in between, not even WhatsApp, should have access.
Scalability: The system should be highly scalable to support an ever-increasing number of users and messages per day.
Capacity Estimation
Storage Estimation:
100 billion messages are shared through WhatsApp per day and each message takes 100 bytes on average
100 billion/day∗100 Bytes = 10 TB/day
For 30 days, the storage capacity would become the following:

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.",7.481906890869141," Response: No
Judgement: Not applicable
Explanation: The provided context does not discuss or estimate average CPU utilization optimization for the system design; therefore, it is ""Not Applicable"" in relation to that specific aspect.",19.40872621536255,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='Consistency: Messages should be delivered in the order they were sent.\nAvailability: The system should be highly available. However, the availability can be compromised in the interest of consistency.\nSecurity: The system must be secure via end-to-end encryption. The end-to-end encryption ensures that only the two communicating parties can see the content of messages. Nobody in between, not even WhatsApp, should have access.\nScalability: The system should be highly scalable to support an ever-increasing number of users and messages per day.\nCapacity Estimation\nStorage Estimation:\n100 billion messages are shared through WhatsApp per day and each message takes 100 bytes on average\n100 billion/day∗100 Bytes = 10 TB/day\nFor 30 days, the storage capacity would become the following:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:3'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'})]","The provided context does not discuss or estimate average CPU utilization optimization for the system design; therefore, it is ""Not Applicable"" in relation to that specific aspect.",Not Applicable,Not Applicable
Is there any mention of managing peak CPU utilization?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

Designing Whatsapp Messenger | System Design
Last Updated : 18 Mar, 2024
Ever thought about how this widely-used messaging app actually works behind the scenes? This article is your guide to the system design of WhatsApp. From handling tons of messages to making sure your chats are secure, we’ll explore the technical aspects that keep this app running smoothly and managing things like managing data, keeping your messages private, and the challenges of making sure your texts arrive lightning-fast.

Designing-WhatsApp-Messenger--System-Design

Important Topics for WhatsApp System Design

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.",7.785166501998901," Response: No
Judgement: Print <No> only.

Explanation: The context provided discusses various aspects such as the microservices architecture, WebSocket protocol for real-time connections, bandwidth estimation, number of servers needed, data flow between different services like message service and asset service, group messaging mechanism using Kafka topic concept, media file handling with blob storage and content delivery through a CDN. However, it does not mention anything about managing peak CPU utilization as part of the system design for WhatsApp Messenger.",24.55925035476685,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='Designing Whatsapp Messenger | System Design\nLast Updated : 18 Mar, 2024\nEver thought about how this widely-used messaging app actually works behind the scenes? This article is your guide to the system design of WhatsApp. From handling tons of messages to making sure your chats are secure, we’ll explore the technical aspects that keep this app running smoothly and managing things like managing data, keeping your messages private, and the challenges of making sure your texts arrive lightning-fast.\n\nDesigning-WhatsApp-Messenger--System-Design\n\nImportant Topics for WhatsApp System Design', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:0'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'})]","The context provided discusses various aspects such as the microservices architecture, WebSocket protocol for real-time connections, bandwidth estimation, number of servers needed, data flow between different services like message service and asset service, group messaging mechanism using Kafka topic concept, media file handling with blob storage and content delivery through a CDN. However, it does not mention anything about managing peak CPU utilization as part of the system design for WhatsApp Messenger.",No,No
Is there any mention of removing unused assets?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.",7.355047941207886," Response: No
Judgement: Not Applicable
Explanation: The context does not contain information regarding asset management or specifically about removing unused assets in the system design for WhatsApp Messenger. It only describes how media files are compressed, encrypted, uploaded to blob storage and accessed using an assigned ID through a messaging service but there is no mention of cleaning up unnecessary data stored on the server side (unused or duplicate content).",21.682353734970093,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'})]","The context does not contain information regarding asset management or specifically about removing unused assets in the system design for WhatsApp Messenger. It only describes how media files are compressed, encrypted, uploaded to blob storage and accessed using an assigned ID through a messaging service but there is no mention of cleaning up unnecessary data stored on the server side (unused or duplicate content).",Not Applicable,Not Applicable
Is there any mention of scaling down Kubernetes applications when not in use?,"Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

Consistency: Messages should be delivered in the order they were sent.
Availability: The system should be highly available. However, the availability can be compromised in the interest of consistency.
Security: The system must be secure via end-to-end encryption. The end-to-end encryption ensures that only the two communicating parties can see the content of messages. Nobody in between, not even WhatsApp, should have access.
Scalability: The system should be highly scalable to support an ever-increasing number of users and messages per day.
Capacity Estimation
Storage Estimation:
100 billion messages are shared through WhatsApp per day and each message takes 100 bytes on average
100 billion/day∗100 Bytes = 10 TB/day
For 30 days, the storage capacity would become the following:

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.

The group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.",17.344664096832275," Response: No
Judgement: <No>
Explanation: The provided context focuses on designing, storage, bandwidth estimation, number of servers needed for WhatsApp Messenger and does not include information about the process or conditions under which Kubernetes applications are scaled down.",21.130378246307373,0,"[Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='Consistency: Messages should be delivered in the order they were sent.\nAvailability: The system should be highly available. However, the availability can be compromised in the interest of consistency.\nSecurity: The system must be secure via end-to-end encryption. The end-to-end encryption ensures that only the two communicating parties can see the content of messages. Nobody in between, not even WhatsApp, should have access.\nScalability: The system should be highly scalable to support an ever-increasing number of users and messages per day.\nCapacity Estimation\nStorage Estimation:\n100 billion messages are shared through WhatsApp per day and each message takes 100 bytes on average\n100 billion/day∗100 Bytes = 10 TB/day\nFor 30 days, the storage capacity would become the following:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:3'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.\n\nThe group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:15'})]","The provided context focuses on designing, storage, bandwidth estimation, number of servers needed for WhatsApp Messenger and does not include information about the process or conditions under which Kubernetes applications are scaled down.",No,No
Is there any mention of scaling down applications during idle periods?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.",17.985451698303223," Response: Not Applicable
Explanation: The context provided discusses various aspects such as architecture decisions for scalability (microservices), WebSocket connections for real-time communication, message delivery acknowledgments including media file sharing and storage considerations. However, there is no specific mention of scaling down applications during idle periods in the given text snippets from the design document related to software development.",20.805423498153687,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'})]","The context provided discusses various aspects such as architecture decisions for scalability (microservices), WebSocket connections for real-time communication, message delivery acknowledgments including media file sharing and storage considerations. However, there is no specific mention of scaling down applications during idle periods in the given text snippets from the design document related to software development.",Not Applicable,Not Applicable
Is there any mention of scaling infrastructure based on real-time user demand?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

Important Topics for WhatsApp System Design

Requirements
Capacity Estimation
High Level Design (HLD) of WhatsApp Messenger
Data Model Design:
API Design
Low Level Design (LLD) of System Design
Approach to achieve the below system attributes
Requirements
The WhatsApp messenger design should meet below requirements:

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.

---

Message service is a repository of messages on top of the Mnesia database cluster. It acts as an interface to the Mnesia database for other services interacting with the databases. It is responsible for storing and retrieving messages from the Mnesia database. It also deletes messages from the Mnesia database after a configurable amount of time. And, it exposes APIs to receive messages by various filters, such as user ID, message ID, and so on.

3. Send or receive media files
We have another service called the asset service, which is responsible for sending and receiving media files.",8.191526651382446," Response: No
Judgement: Print <No> only.
Explanation: The context does not include details about dynamically adjusting the scale of infrastructure in response to fluctuating, or real-time, user demands; it mainly talks about handling billions of devices and connections through multiple servers with static estimates for scaling requirements based on data volume rather than immediate demand.",21.594359159469604,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='Important Topics for WhatsApp System Design\n\nRequirements\nCapacity Estimation\nHigh Level Design (HLD) of WhatsApp Messenger\nData Model Design:\nAPI Design\nLow Level Design (LLD) of System Design\nApproach to achieve the below system attributes\nRequirements\nThe WhatsApp messenger design should meet below requirements:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:1'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'}), Document(page_content='Message service is a repository of messages on top of the Mnesia database cluster. It acts as an interface to the Mnesia database for other services interacting with the databases. It is responsible for storing and retrieving messages from the Mnesia database. It also deletes messages from the Mnesia database after a configurable amount of time. And, it exposes APIs to receive messages by various filters, such as user ID, message ID, and so on.\n\n3. Send or receive media files\nWe have another service called the asset service, which is responsible for sending and receiving media files.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:12'})]","The context does not include details about dynamically adjusting the scale of infrastructure in response to fluctuating, or real-time, user demands; it mainly talks about handling billions of devices and connections through multiple servers with static estimates for scaling requirements based on data volume rather than immediate demand.",No,No
Is there any mention of using relevant metrics to dynamically adjust Kubernetes workloads?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

Approach to achieve the below system attributes
Non-functional Requirements

Approaches

Minimizing latency

Geographically distributed cache management systems and servers
CDNs
Consistency

Provide unique IDs to messages using Sequencer or other mechanisms
Use FIFO messaging queue with strict ordering
Availability

Provide multiple WebSocket servers and managers to establish connections between users
Replication of messages and data associated with users and groups on different servers
Follow disaster recovery protocols
Security

Via end-to-end encryption
Scalability

Performance tuning of servers
Horizontal scalability of services

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.",8.369204998016357," No

In Explanation: The document provides details about system architecture for WhatsApp Messenger but does not discuss the use of monitoring or analytics tools like Prometheus, Grafana, Loki etc., which are typically used in containerized environments such as Kubernetes to dynamically adjust resources.",20.580040454864506,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='Approach to achieve the below system attributes\nNon-functional Requirements\n\nApproaches\n\nMinimizing latency\n\nGeographically distributed cache management systems and servers\nCDNs\nConsistency\n\nProvide unique IDs to messages using Sequencer or other mechanisms\nUse FIFO messaging queue with strict ordering\nAvailability\n\nProvide multiple WebSocket servers and managers to establish connections between users\nReplication of messages and data associated with users and groups on different servers\nFollow disaster recovery protocols\nSecurity\n\nVia end-to-end encryption\nScalability\n\nPerformance tuning of servers\nHorizontal scalability of services', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:16'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'})]","The document provides details about system architecture for WhatsApp Messenger but does not discuss the use of monitoring or analytics tools like Prometheus, Grafana, Loki etc., which are typically used in containerized environments such as Kubernetes to dynamically adjust resources.",No,No
Is there any mention of allowing independent scaling of logical components?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.",7.986393213272095," Response: No
Judgement: Not Applicable
Explanation: The context provided discusses various aspects such as WebSocket connections, message delivery acknowledgment, media file handling and storage capacity estimations but it does not explicitly state anything about the independent scalability or scale-out capabilities of logical components within this system.",19.2542142868042,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'})]","The context provided discusses various aspects such as WebSocket connections, message delivery acknowledgment, media file handling and storage capacity estimations but it does not explicitly state anything about the independent scalability or scale-out capabilities of logical components within this system.",Not Applicable,Not Applicable
Is there any mention of adopting serverless cloud services?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

Important Topics for WhatsApp System Design

Requirements
Capacity Estimation
High Level Design (HLD) of WhatsApp Messenger
Data Model Design:
API Design
Low Level Design (LLD) of System Design
Approach to achieve the below system attributes
Requirements
The WhatsApp messenger design should meet below requirements:

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.",7.9934117794036865," Response: No
Judgement: <No>
Explanation: The context provided focuses on microservices architecture with emphasis on WebSocket servers for real-time communication among users and does not discuss the use or adoption of serverless cloud services. Serverless computing is a different paradigm that automatically manages machine resources, which was not mentioned in this document as relevant to its design goals.",20.200411558151245,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='Important Topics for WhatsApp System Design\n\nRequirements\nCapacity Estimation\nHigh Level Design (HLD) of WhatsApp Messenger\nData Model Design:\nAPI Design\nLow Level Design (LLD) of System Design\nApproach to achieve the below system attributes\nRequirements\nThe WhatsApp messenger design should meet below requirements:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:1'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'})]","The context provided focuses on microservices architecture with emphasis on WebSocket servers for real-time communication among users and does not discuss the use or adoption of serverless cloud services. Serverless computing is a different paradigm that automatically manages machine resources, which was not mentioned in this document as relevant to its design goals.",No,No
Is there any mention of reducing transmitted data?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.

The group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:",7.540274381637573," No, in judgement. The provided context does not explicitly state or imply a method for reducing transmitted data within WhatsApp's messaging and media file download processes as described.

Explanation: While the design mentions compressing and encrypting files before sending them to blob storage (potentially saving bandwidth), it doesn't directly discuss techniques implemented specifically on message transmission between clients, such as compression or deduplication of text messages similar to what is used for media content in some messaging platforms.",22.184515714645386,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.\n\nThe group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:15'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'})]","While the design mentions compressing and encrypting files before sending them to blob storage (potentially saving bandwidth), it doesn't directly discuss techniques implemented specifically on message transmission between clients, such as compression or deduplication of text messages similar to what is used for media content in some messaging platforms.",No,No
Is there any mention of setting storage retention policies?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.

The group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.",32.95940685272217," No, there is no mention of setting storage retention policies in the provided context. The focus seems to be on persistent storage for chat messages when a user is offline and delivering notifications upon their reconnection without specific reference to retention periods or policies.

Judgement: Not Applicable",20.169688940048218,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.\n\nThe group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:15'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'})]","is no mention of setting storage retention policies in the provided context. The focus seems to be on persistent storage for chat messages when a user is offline and delivering notifications upon their reconnection without specific reference to retention periods or policies.

Judgement: Not Applicable",No,No
Is there any mention of queuing non-urgent processing requests,"Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

Approach to achieve the below system attributes
Non-functional Requirements

Approaches

Minimizing latency

Geographically distributed cache management systems and servers
CDNs
Consistency

Provide unique IDs to messages using Sequencer or other mechanisms
Use FIFO messaging queue with strict ordering
Availability

Provide multiple WebSocket servers and managers to establish connections between users
Replication of messages and data associated with users and groups on different servers
Follow disaster recovery protocols
Security

Via end-to-end encryption
Scalability

Performance tuning of servers
Horizontal scalability of services

---

Consistency: Messages should be delivered in the order they were sent.
Availability: The system should be highly available. However, the availability can be compromised in the interest of consistency.
Security: The system must be secure via end-to-end encryption. The end-to-end encryption ensures that only the two communicating parties can see the content of messages. Nobody in between, not even WhatsApp, should have access.
Scalability: The system should be highly scalable to support an ever-increasing number of users and messages per day.
Capacity Estimation
Storage Estimation:
100 billion messages are shared through WhatsApp per day and each message takes 100 bytes on average
100 billion/day∗100 Bytes = 10 TB/day
For 30 days, the storage capacity would become the following:

---

users: This table will contain a user’s information such as name, phoneNumber, and other details.
messages: This table will store messages with properties such as type (text, image, video, etc.), content, and timestamps for message delivery. The message will also have a corresponding chatID or groupID.
chats: This table basically represents a private chat between two users and can contain multiple messages.
users_chats: This table maps users and chats as multiple users can have multiple chats (N:M relationship) and vice versa.
groups: This table represents a group between multiple users.
users_groups: This table maps users and groups as multiple users can be a part of multiple groups (N:M relationship) and vice versa.
API Design
Send message

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.",7.765524387359619," Response: No
Judgement: <No>
Explanation: The High Level Design (HLD) document does not discuss or provide details about queueing systems for handling non-urgent, time-sensitive tasks. Instead, it focuses on aspects such as maintaining message order, ensuring consistency and availability through replication of data across servers, scalable architectures like microservices with WebSocket protocols, end-to-end encryption security measures along with other operational attributes to support WhatsApp's functionality. There is no explicit mention about any queue for non-urgent tasks in the document provided.",26.905307054519653,0,"[Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='Approach to achieve the below system attributes\nNon-functional Requirements\n\nApproaches\n\nMinimizing latency\n\nGeographically distributed cache management systems and servers\nCDNs\nConsistency\n\nProvide unique IDs to messages using Sequencer or other mechanisms\nUse FIFO messaging queue with strict ordering\nAvailability\n\nProvide multiple WebSocket servers and managers to establish connections between users\nReplication of messages and data associated with users and groups on different servers\nFollow disaster recovery protocols\nSecurity\n\nVia end-to-end encryption\nScalability\n\nPerformance tuning of servers\nHorizontal scalability of services', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:16'}), Document(page_content='Consistency: Messages should be delivered in the order they were sent.\nAvailability: The system should be highly available. However, the availability can be compromised in the interest of consistency.\nSecurity: The system must be secure via end-to-end encryption. The end-to-end encryption ensures that only the two communicating parties can see the content of messages. Nobody in between, not even WhatsApp, should have access.\nScalability: The system should be highly scalable to support an ever-increasing number of users and messages per day.\nCapacity Estimation\nStorage Estimation:\n100 billion messages are shared through WhatsApp per day and each message takes 100 bytes on average\n100 billion/day∗100 Bytes = 10 TB/day\nFor 30 days, the storage capacity would become the following:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:3'}), Document(page_content='users: This table will contain a user’s information such as name, phoneNumber, and other details.\nmessages: This table will store messages with properties such as type (text, image, video, etc.), content, and timestamps for message delivery. The message will also have a corresponding chatID or groupID.\nchats: This table basically represents a private chat between two users and can contain multiple messages.\nusers_chats: This table maps users and chats as multiple users can have multiple chats (N:M relationship) and vice versa.\ngroups: This table represents a group between multiple users.\nusers_groups: This table maps users and groups as multiple users can be a part of multiple groups (N:M relationship) and vice versa.\nAPI Design\nSend message', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:7'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'})]","The High Level Design (HLD) document does not discuss or provide details about queueing systems for handling non-urgent, time-sensitive tasks. Instead, it focuses on aspects such as maintaining message order, ensuring consistency and availability through replication of data across servers, scalable architectures like microservices with WebSocket protocols, end-to-end encryption security measures along with other operational attributes to support WhatsApp's functionality. There is no explicit mention about any queue for non-urgent tasks in the document provided.",No,No
Is there any mention of prioritizing critical traffic and shedding lower priority traffic?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.

---

Approach to achieve the below system attributes
Non-functional Requirements

Approaches

Minimizing latency

Geographically distributed cache management systems and servers
CDNs
Consistency

Provide unique IDs to messages using Sequencer or other mechanisms
Use FIFO messaging queue with strict ordering
Availability

Provide multiple WebSocket servers and managers to establish connections between users
Replication of messages and data associated with users and groups on different servers
Follow disaster recovery protocols
Security

Via end-to-end encryption
Scalability

Performance tuning of servers
Horizontal scalability of services",8.504395484924316," Judgement: Not Applicable. 

Explanation: In the provided context, while it discusses low latency through caching systems, CDNs, unique message IDs for consistency, multiple servers to ensure availability with replication protocols, end-to-end encryption for security, and scalability measures like performance tuning and horizontal scaling of services. There is no mention specifically about prioritizing critical traffic or shifting lower priority traffic within the text given.",24.05685138702393,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'}), Document(page_content='Approach to achieve the below system attributes\nNon-functional Requirements\n\nApproaches\n\nMinimizing latency\n\nGeographically distributed cache management systems and servers\nCDNs\nConsistency\n\nProvide unique IDs to messages using Sequencer or other mechanisms\nUse FIFO messaging queue with strict ordering\nAvailability\n\nProvide multiple WebSocket servers and managers to establish connections between users\nReplication of messages and data associated with users and groups on different servers\nFollow disaster recovery protocols\nSecurity\n\nVia end-to-end encryption\nScalability\n\nPerformance tuning of servers\nHorizontal scalability of services', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:16'})]","In the provided context, while it discusses low latency through caching systems, CDNs, unique message IDs for consistency, multiple servers to ensure availability with replication protocols, end-to-end encryption for security, and scalability measures like performance tuning and horizontal scaling of services. There is no mention specifically about prioritizing critical traffic or shifting lower priority traffic within the text given.",Not Applicable,Not Applicable
Is there any mention of scheduling Kubernetes cron jobs during off-peak hours?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.",33.63658380508423," Judgement: Not applicable

Explanation: The context provided does not include information about using or implementing Kubernetes cron jobs for managing tasks such as cleaning up unused resources, performing health checks on services, etc., especially those scheduled to be performed during the software's off-peak hours.",19.468029975891113,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'})]","The context provided does not include information about using or implementing Kubernetes cron jobs for managing tasks such as cleaning up unused resources, performing health checks on services, etc., especially those scheduled to be performed during the software's off-peak hours.",Not Applicable,Not Applicable
Is there any mention of using asynchronous network calls instead of synchronous ones?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

Approach to achieve the below system attributes
Non-functional Requirements

Approaches

Minimizing latency

Geographically distributed cache management systems and servers
CDNs
Consistency

Provide unique IDs to messages using Sequencer or other mechanisms
Use FIFO messaging queue with strict ordering
Availability

Provide multiple WebSocket servers and managers to establish connections between users
Replication of messages and data associated with users and groups on different servers
Follow disaster recovery protocols
Security

Via end-to-end encryption
Scalability

Performance tuning of servers
Horizontal scalability of services",7.941451787948608," No, the context does not explicitly mention whether asynchronous or synchronous network calls are used. To provide an accurate response to this aspect, more information from the document would be required regarding communication protocols and data flow methods within the system's architecture.

Judgement: Not Applicable
Explanation: The provided context lacks specific details about whether asynchronous or synchronous network calls are employed in the software development project for WhatsApp Messenger, making it impossible to ascertain based on this excerpt alone.",23.131864547729492,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='Approach to achieve the below system attributes\nNon-functional Requirements\n\nApproaches\n\nMinimizing latency\n\nGeographically distributed cache management systems and servers\nCDNs\nConsistency\n\nProvide unique IDs to messages using Sequencer or other mechanisms\nUse FIFO messaging queue with strict ordering\nAvailability\n\nProvide multiple WebSocket servers and managers to establish connections between users\nReplication of messages and data associated with users and groups on different servers\nFollow disaster recovery protocols\nSecurity\n\nVia end-to-end encryption\nScalability\n\nPerformance tuning of servers\nHorizontal scalability of services', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:16'})]","The provided context lacks specific details about whether asynchronous or synchronous network calls are employed in the software development project for WhatsApp Messenger, making it impossible to ascertain based on this excerpt alone.",Not Applicable,Not Applicable
Is there any mention of implementing circuit breaker patterns?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

Important Topics for WhatsApp System Design

Requirements
Capacity Estimation
High Level Design (HLD) of WhatsApp Messenger
Data Model Design:
API Design
Low Level Design (LLD) of System Design
Approach to achieve the below system attributes
Requirements
The WhatsApp messenger design should meet below requirements:

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.",7.531492710113525," Judgement: Not Applicable

Explanation: The context provided does not include information about utilizing circuit breaker patterns in the design for WhatsApp Messenger; thus it is not applicable to my query. Circuit-breaker mechanisms are typically used to prevent a network or service from making calls when there's an issue, but this text doesn't discuss that aspect of system resilience and reliability within its scope on the design for WhatsApp Messenger.",22.30718874931335,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='Important Topics for WhatsApp System Design\n\nRequirements\nCapacity Estimation\nHigh Level Design (HLD) of WhatsApp Messenger\nData Model Design:\nAPI Design\nLow Level Design (LLD) of System Design\nApproach to achieve the below system attributes\nRequirements\nThe WhatsApp messenger design should meet below requirements:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:1'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'})]","The context provided does not include information about utilizing circuit breaker patterns in the design for WhatsApp Messenger; thus it is not applicable to my query. Circuit-breaker mechanisms are typically used to prevent a network or service from making calls when there's an issue, but this text doesn't discuss that aspect of system resilience and reliability within its scope on the design for WhatsApp Messenger.",Not Applicable,Not Applicable
Is there any mention of regularly scanning for and fixing vulnerabilities?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

Message service is a repository of messages on top of the Mnesia database cluster. It acts as an interface to the Mnesia database for other services interacting with the databases. It is responsible for storing and retrieving messages from the Mnesia database. It also deletes messages from the Mnesia database after a configurable amount of time. And, it exposes APIs to receive messages by various filters, such as user ID, message ID, and so on.

3. Send or receive media files
We have another service called the asset service, which is responsible for sending and receiving media files.

---

Designing Whatsapp Messenger | System Design
Last Updated : 18 Mar, 2024
Ever thought about how this widely-used messaging app actually works behind the scenes? This article is your guide to the system design of WhatsApp. From handling tons of messages to making sure your chats are secure, we’ll explore the technical aspects that keep this app running smoothly and managing things like managing data, keeping your messages private, and the challenges of making sure your texts arrive lightning-fast.

Designing-WhatsApp-Messenger--System-Design

Important Topics for WhatsApp System Design",8.320603370666504," In judgement, No

In the provided context, although it discusses various aspects like message delivery acknowledgment, media file sharing, chat storage, push notifications, bandwidth estimation, number of servers required based on connections per day/server capacity ratio, group messaging process with Kafka and Mnesia database clusters for storing messages temporarily or permanently. However, there is no mention specifically about the practice of regularly scanning for vulnerabilities in the system design described herein.",23.599311590194706,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='Message service is a repository of messages on top of the Mnesia database cluster. It acts as an interface to the Mnesia database for other services interacting with the databases. It is responsible for storing and retrieving messages from the Mnesia database. It also deletes messages from the Mnesia database after a configurable amount of time. And, it exposes APIs to receive messages by various filters, such as user ID, message ID, and so on.\n\n3. Send or receive media files\nWe have another service called the asset service, which is responsible for sending and receiving media files.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:12'}), Document(page_content='Designing Whatsapp Messenger | System Design\nLast Updated : 18 Mar, 2024\nEver thought about how this widely-used messaging app actually works behind the scenes? This article is your guide to the system design of WhatsApp. From handling tons of messages to making sure your chats are secure, we’ll explore the technical aspects that keep this app running smoothly and managing things like managing data, keeping your messages private, and the challenges of making sure your texts arrive lightning-fast.\n\nDesigning-WhatsApp-Messenger--System-Design\n\nImportant Topics for WhatsApp System Design', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:0'})]","nt, No

In the provided context, although it discusses various aspects like message delivery acknowledgment, media file sharing, chat storage, push notifications, bandwidth estimation, number of servers required based on connections per day/server capacity ratio, group messaging process with Kafka and Mnesia database clusters for storing messages temporarily or permanently. However, there is no mention specifically about the practice of regularly scanning for vulnerabilities in the system design described herein.",No,No
Is there any mention of adopting cloud-native network security tools and controls?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

Important Topics for WhatsApp System Design

Requirements
Capacity Estimation
High Level Design (HLD) of WhatsApp Messenger
Data Model Design:
API Design
Low Level Design (LLD) of System Design
Approach to achieve the below system attributes
Requirements
The WhatsApp messenger design should meet below requirements:

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.

---

Approach to achieve the below system attributes
Non-functional Requirements

Approaches

Minimizing latency

Geographically distributed cache management systems and servers
CDNs
Consistency

Provide unique IDs to messages using Sequencer or other mechanisms
Use FIFO messaging queue with strict ordering
Availability

Provide multiple WebSocket servers and managers to establish connections between users
Replication of messages and data associated with users and groups on different servers
Follow disaster recovery protocols
Security

Via end-to-end encryption
Scalability

Performance tuning of servers
Horizontal scalability of services",8.331896543502808," Response: No.

Explanation: The context provided does not include information about using cloud-native network security tools and controls for the software development project, particularly concerning WhatsApp's system design. Instead, it discusses various aspects like architecture (microservices), data models, APIs, media file handling involving compression, encryption, storage on blob services, CDN usage, group messaging processes using Kafka, non-functional requirements related to latency reduction through geographical distribution and caching systems as well as other scalability measures. However, there is no explicit mention of adopting cloud-native network security tools in the provided context.",26.569734573364254,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='Important Topics for WhatsApp System Design\n\nRequirements\nCapacity Estimation\nHigh Level Design (HLD) of WhatsApp Messenger\nData Model Design:\nAPI Design\nLow Level Design (LLD) of System Design\nApproach to achieve the below system attributes\nRequirements\nThe WhatsApp messenger design should meet below requirements:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:1'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'}), Document(page_content='Approach to achieve the below system attributes\nNon-functional Requirements\n\nApproaches\n\nMinimizing latency\n\nGeographically distributed cache management systems and servers\nCDNs\nConsistency\n\nProvide unique IDs to messages using Sequencer or other mechanisms\nUse FIFO messaging queue with strict ordering\nAvailability\n\nProvide multiple WebSocket servers and managers to establish connections between users\nReplication of messages and data associated with users and groups on different servers\nFollow disaster recovery protocols\nSecurity\n\nVia end-to-end encryption\nScalability\n\nPerformance tuning of servers\nHorizontal scalability of services', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:16'})]","The context provided does not include information about using cloud-native network security tools and controls for the software development project, particularly concerning WhatsApp's system design. Instead, it discusses various aspects like architecture (microservices), data models, APIs, media file handling involving compression, encryption, storage on blob services, CDN usage, group messaging processes using Kafka, non-functional requirements related to latency reduction through geographical distribution and caching systems as well as other scalability measures. However, there is no explicit mention of adopting cloud-native network security tools in the provided context.",No,No
Is there any mention of using DDoS protection?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

Approach to achieve the below system attributes
Non-functional Requirements

Approaches

Minimizing latency

Geographically distributed cache management systems and servers
CDNs
Consistency

Provide unique IDs to messages using Sequencer or other mechanisms
Use FIFO messaging queue with strict ordering
Availability

Provide multiple WebSocket servers and managers to establish connections between users
Replication of messages and data associated with users and groups on different servers
Follow disaster recovery protocols
Security

Via end-to-end encryption
Scalability

Performance tuning of servers
Horizontal scalability of services

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.",33.19795536994934," Response: Not applicable
Judgement: No
Explanation: The provided context does not include or imply anything about implementing Distributed Denial-of-Service (DDoS) protection measures in the system design.",18.037694454193115,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='Approach to achieve the below system attributes\nNon-functional Requirements\n\nApproaches\n\nMinimizing latency\n\nGeographically distributed cache management systems and servers\nCDNs\nConsistency\n\nProvide unique IDs to messages using Sequencer or other mechanisms\nUse FIFO messaging queue with strict ordering\nAvailability\n\nProvide multiple WebSocket servers and managers to establish connections between users\nReplication of messages and data associated with users and groups on different servers\nFollow disaster recovery protocols\nSecurity\n\nVia end-to-end encryption\nScalability\n\nPerformance tuning of servers\nHorizontal scalability of services', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:16'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'})]",The provided context does not include or imply anything about implementing Distributed Denial-of-Service (DDoS) protection measures in the system design.,No,No
Is there any mention of designing software to minimize impact on end-user devices and equipment?,"The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Important Topics for WhatsApp System Design

Requirements
Capacity Estimation
High Level Design (HLD) of WhatsApp Messenger
Data Model Design:
API Design
Low Level Design (LLD) of System Design
Approach to achieve the below system attributes
Requirements
The WhatsApp messenger design should meet below requirements:

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.

---

Approach to achieve the below system attributes
Non-functional Requirements

Approaches

Minimizing latency

Geographically distributed cache management systems and servers
CDNs
Consistency

Provide unique IDs to messages using Sequencer or other mechanisms
Use FIFO messaging queue with strict ordering
Availability

Provide multiple WebSocket servers and managers to establish connections between users
Replication of messages and data associated with users and groups on different servers
Follow disaster recovery protocols
Security

Via end-to-end encryption
Scalability

Performance tuning of servers
Horizontal scalability of services",8.736566066741943," Response: No, based on the provided context. 

Explanation: The document discusses various aspects such as WebSocket server management for handling a large number of connections, media file downloads through microservices architecture, message delivery acknowledgment system including push notifications while offline users are online again and maintaining consistency in delivering messages but it does not specifically mention anything about designing software to minimize impact on end-user devices and equipment.",22.92282462120056,0,"[Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Important Topics for WhatsApp System Design\n\nRequirements\nCapacity Estimation\nHigh Level Design (HLD) of WhatsApp Messenger\nData Model Design:\nAPI Design\nLow Level Design (LLD) of System Design\nApproach to achieve the below system attributes\nRequirements\nThe WhatsApp messenger design should meet below requirements:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:1'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'}), Document(page_content='Approach to achieve the below system attributes\nNon-functional Requirements\n\nApproaches\n\nMinimizing latency\n\nGeographically distributed cache management systems and servers\nCDNs\nConsistency\n\nProvide unique IDs to messages using Sequencer or other mechanisms\nUse FIFO messaging queue with strict ordering\nAvailability\n\nProvide multiple WebSocket servers and managers to establish connections between users\nReplication of messages and data associated with users and groups on different servers\nFollow disaster recovery protocols\nSecurity\n\nVia end-to-end encryption\nScalability\n\nPerformance tuning of servers\nHorizontal scalability of services', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:16'})]","The document discusses various aspects such as WebSocket server management for handling a large number of connections, media file downloads through microservices architecture, message delivery acknowledgment system including push notifications while offline users are online again and maintaining consistency in delivering messages but it does not specifically mention anything about designing software to minimize impact on end-user devices and equipment.",No,No
Is there any mention of choosing server regions that are closest to users?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

Designing Whatsapp Messenger | System Design
Last Updated : 18 Mar, 2024
Ever thought about how this widely-used messaging app actually works behind the scenes? This article is your guide to the system design of WhatsApp. From handling tons of messages to making sure your chats are secure, we’ll explore the technical aspects that keep this app running smoothly and managing things like managing data, keeping your messages private, and the challenges of making sure your texts arrive lightning-fast.

Designing-WhatsApp-Messenger--System-Design

Important Topics for WhatsApp System Design

---

The following steps describe the communication between both clients:

User A and user B create a communication channel with the chat server.
User A sends a message to the chat server.
Upon receiving the message, the chat server acknowledges back to user A.
The chat server sends the message to user B and stores the message in the database if the receiver’s status is offline.
User B sends an acknowledgment to the chat server.
The chat server notifies user A that the message has been successfully delivered.
When user B reads the message, the application notifies the chat server.
The chat server notifies user A that user B has read the message.
Data Model Design:
Data-Model-Design

---

Consistency: Messages should be delivered in the order they were sent.
Availability: The system should be highly available. However, the availability can be compromised in the interest of consistency.
Security: The system must be secure via end-to-end encryption. The end-to-end encryption ensures that only the two communicating parties can see the content of messages. Nobody in between, not even WhatsApp, should have access.
Scalability: The system should be highly scalable to support an ever-increasing number of users and messages per day.
Capacity Estimation
Storage Estimation:
100 billion messages are shared through WhatsApp per day and each message takes 100 bytes on average
100 billion/day∗100 Bytes = 10 TB/day
For 30 days, the storage capacity would become the following:",8.066046714782715," Response Judgement: Not Applicable.

Explanation: The context provided discusses various aspects of WhatsApp's system design such as architecture choices, data flow between services and user interactions for sending messages. However, it does not mention anything about choosing server regions that are closest to users in order to reduce latency or improve service delivery. Therefore the response is ""Not Applicable"".",23.174615144729614,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='Designing Whatsapp Messenger | System Design\nLast Updated : 18 Mar, 2024\nEver thought about how this widely-used messaging app actually works behind the scenes? This article is your guide to the system design of WhatsApp. From handling tons of messages to making sure your chats are secure, we’ll explore the technical aspects that keep this app running smoothly and managing things like managing data, keeping your messages private, and the challenges of making sure your texts arrive lightning-fast.\n\nDesigning-WhatsApp-Messenger--System-Design\n\nImportant Topics for WhatsApp System Design', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:0'}), Document(page_content='The following steps describe the communication between both clients:\n\nUser A and user B create a communication channel with the chat server.\nUser A sends a message to the chat server.\nUpon receiving the message, the chat server acknowledges back to user A.\nThe chat server sends the message to user B and stores the message in the database if the receiver’s status is offline.\nUser B sends an acknowledgment to the chat server.\nThe chat server notifies user A that the message has been successfully delivered.\nWhen user B reads the message, the application notifies the chat server.\nThe chat server notifies user A that user B has read the message.\nData Model Design:\nData-Model-Design', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:6'}), Document(page_content='Consistency: Messages should be delivered in the order they were sent.\nAvailability: The system should be highly available. However, the availability can be compromised in the interest of consistency.\nSecurity: The system must be secure via end-to-end encryption. The end-to-end encryption ensures that only the two communicating parties can see the content of messages. Nobody in between, not even WhatsApp, should have access.\nScalability: The system should be highly scalable to support an ever-increasing number of users and messages per day.\nCapacity Estimation\nStorage Estimation:\n100 billion messages are shared through WhatsApp per day and each message takes 100 bytes on average\n100 billion/day∗100 Bytes = 10 TB/day\nFor 30 days, the storage capacity would become the following:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:3'})]","The context provided discusses various aspects of WhatsApp's system design such as architecture choices, data flow between services and user interactions for sending messages. However, it does not mention anything about choosing server regions that are closest to users in order to reduce latency or improve service delivery. Therefore the response is ""Not Applicable"".",Not Applicable,Not Applicable
Is there any mention of containerizing workloads?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.

The group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:",32.903940200805664," In Explanation, 
No containers were mentioned in the given context as it mainly discusses various technologies and protocols used for different purposes within a software development framework. Containerization might not be explicitly referenced or required based on provided information but is generally considered best practice when deploying microservices to ensure consistency across environments which this design document seems aware of, opting instead for services like Redis cache servers and MySQL database clusters along with geographical replication strategies.",21.327629566192627,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.\n\nThe group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:15'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'})]","tion, 
No containers were mentioned in the given context as it mainly discusses various technologies and protocols used for different purposes within a software development framework. Containerization might not be explicitly referenced or required based on provided information but is generally considered best practice when deploying microservices to ensure consistency across environments which this design document seems aware of, opting instead for services like Redis cache servers and MySQL database clusters along with geographical replication strategies.",No,No
Is there any mention of deleting unused storage resources?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.

The group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.",7.3558337688446045," In Explanation, 
No deletion process for unused storage resources is mentioned or implied within the context provided; all necessary protocols and services seem to handle media files securely without indicating a cleanup mechanism specifically.",18.193467617034912,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.\n\nThe group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:15'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'})]","tion, 
No deletion process for unused storage resources is mentioned or implied within the context provided; all necessary protocols and services seem to handle media files securely without indicating a cleanup mechanism specifically.",No,No
Is there any mention of evaluating other CPU architectures?,"4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.

---

Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.

The group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Approach to achieve the below system attributes
Non-functional Requirements

Approaches

Minimizing latency

Geographically distributed cache management systems and servers
CDNs
Consistency

Provide unique IDs to messages using Sequencer or other mechanisms
Use FIFO messaging queue with strict ordering
Availability

Provide multiple WebSocket servers and managers to establish connections between users
Replication of messages and data associated with users and groups on different servers
Follow disaster recovery protocols
Security

Via end-to-end encryption
Scalability

Performance tuning of servers
Horizontal scalability of services

---

Message service is a repository of messages on top of the Mnesia database cluster. It acts as an interface to the Mnesia database for other services interacting with the databases. It is responsible for storing and retrieving messages from the Mnesia database. It also deletes messages from the Mnesia database after a configurable amount of time. And, it exposes APIs to receive messages by various filters, such as user ID, message ID, and so on.

3. Send or receive media files
We have another service called the asset service, which is responsible for sending and receiving media files.",7.603932619094849," Response: Not applicable
Judgement: <Not Applicable>
Explanation: The provided context does not include information regarding the evaluation or consideration of alternative computing hardware beyond a performance tuning and scalability strategy for server management. It mainly focuses on software architecture, specifically microservices designed to handle group messages efficiently while also maintaining low latency through geographically distributed systems and caching with Redis as well as using WebSockets protocols in tandem with Mnesia database clusters for message storage and retrieval tasks.",23.685275554656982,0,"[Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'}), Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.\n\nThe group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:15'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Approach to achieve the below system attributes\nNon-functional Requirements\n\nApproaches\n\nMinimizing latency\n\nGeographically distributed cache management systems and servers\nCDNs\nConsistency\n\nProvide unique IDs to messages using Sequencer or other mechanisms\nUse FIFO messaging queue with strict ordering\nAvailability\n\nProvide multiple WebSocket servers and managers to establish connections between users\nReplication of messages and data associated with users and groups on different servers\nFollow disaster recovery protocols\nSecurity\n\nVia end-to-end encryption\nScalability\n\nPerformance tuning of servers\nHorizontal scalability of services', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:16'}), Document(page_content='Message service is a repository of messages on top of the Mnesia database cluster. It acts as an interface to the Mnesia database for other services interacting with the databases. It is responsible for storing and retrieving messages from the Mnesia database. It also deletes messages from the Mnesia database after a configurable amount of time. And, it exposes APIs to receive messages by various filters, such as user ID, message ID, and so on.\n\n3. Send or receive media files\nWe have another service called the asset service, which is responsible for sending and receiving media files.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:12'})]","The provided context does not include information regarding the evaluation or consideration of alternative computing hardware beyond a performance tuning and scalability strategy for server management. It mainly focuses on software architecture, specifically microservices designed to handle group messages efficiently while also maintaining low latency through geographically distributed systems and caching with Redis as well as using WebSockets protocols in tandem with Mnesia database clusters for message storage and retrieval tasks.",Not Applicable,Not Applicable
Is there any mention of ensuring VMs are right-sized for their workloads?,"Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

Important Topics for WhatsApp System Design

Requirements
Capacity Estimation
High Level Design (HLD) of WhatsApp Messenger
Data Model Design:
API Design
Low Level Design (LLD) of System Design
Approach to achieve the below system attributes
Requirements
The WhatsApp messenger design should meet below requirements:

---

This API is used to send a text message from a sender to a receiver by making a POST API call to the /messages API endpoint. Generally, the sender’s and receiver’s IDs are their phone numbers.

Get Message
getMessage(user_Id)

Using this API call, users can fetch all unread messages when they come online after being offline for some time.

Upload File
uploadFile(file_type, file)

We can upload media files via the uploadFile API by making a POST request to the /v1/media API endpoint. A successful response returns an ID that’s forwarded to the receiver.

Download Media File
downloadFile(user_id, file_id)

---

Designing Whatsapp Messenger | System Design
Last Updated : 18 Mar, 2024
Ever thought about how this widely-used messaging app actually works behind the scenes? This article is your guide to the system design of WhatsApp. From handling tons of messages to making sure your chats are secure, we’ll explore the technical aspects that keep this app running smoothly and managing things like managing data, keeping your messages private, and the challenges of making sure your texts arrive lightning-fast.

Designing-WhatsApp-Messenger--System-Design

Important Topics for WhatsApp System Design

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.",8.84574556350708," Response: No

Judgement: The provided context does not discuss anything about virtual machines (VMs) or how to size them according to the software development needs described in your design document. These aspects were outside the scope of my given excerpt from a five-paragraph technical description focused on messaging and file sharing functionalities within an application, along with its data handling processes through various services such as WebSocket manager, message service, asset service, Kafka topic for group messages, blob storage, CDNs.

Explanation: The context provided pertains solely to the mechanisms of a messaging system that supports individual and group conversations alongside media file sharing within an application's design document. It describes how these functionalities are achieved technically without touching on virtual machine considerations like right-sizing or infrastructure management, which would typically be beyond this specific technical scope related to message delivery systems in software applications.",32.155566930770874,0,"[Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='Important Topics for WhatsApp System Design\n\nRequirements\nCapacity Estimation\nHigh Level Design (HLD) of WhatsApp Messenger\nData Model Design:\nAPI Design\nLow Level Design (LLD) of System Design\nApproach to achieve the below system attributes\nRequirements\nThe WhatsApp messenger design should meet below requirements:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:1'}), Document(page_content='This API is used to send a text message from a sender to a receiver by making a POST API call to the /messages API endpoint. Generally, the sender’s and receiver’s IDs are their phone numbers.\n\nGet Message\ngetMessage(user_Id)\n\nUsing this API call, users can fetch all unread messages when they come online after being offline for some time.\n\nUpload File\nuploadFile(file_type, file)\n\nWe can upload media files via the uploadFile API by making a POST request to the /v1/media API endpoint. A successful response returns an ID that’s forwarded to the receiver.\n\nDownload Media File\ndownloadFile(user_id, file_id)', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:9'}), Document(page_content='Designing Whatsapp Messenger | System Design\nLast Updated : 18 Mar, 2024\nEver thought about how this widely-used messaging app actually works behind the scenes? This article is your guide to the system design of WhatsApp. From handling tons of messages to making sure your chats are secure, we’ll explore the technical aspects that keep this app running smoothly and managing things like managing data, keeping your messages private, and the challenges of making sure your texts arrive lightning-fast.\n\nDesigning-WhatsApp-Messenger--System-Design\n\nImportant Topics for WhatsApp System Design', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:0'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'})]","The context provided pertains solely to the mechanisms of a messaging system that supports individual and group conversations alongside media file sharing within an application's design document. It describes how these functionalities are achieved technically without touching on virtual machine considerations like right-sizing or infrastructure management, which would typically be beyond this specific technical scope related to message delivery systems in software applications.",No,No
Is there any mention of using pre-configured servers that match workload requirements?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

Approach to achieve the below system attributes
Non-functional Requirements

Approaches

Minimizing latency

Geographically distributed cache management systems and servers
CDNs
Consistency

Provide unique IDs to messages using Sequencer or other mechanisms
Use FIFO messaging queue with strict ordering
Availability

Provide multiple WebSocket servers and managers to establish connections between users
Replication of messages and data associated with users and groups on different servers
Follow disaster recovery protocols
Security

Via end-to-end encryption
Scalability

Performance tuning of servers
Horizontal scalability of services

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.",8.720479726791382," Response: No, 
Judgement: Not Applicable
Explanation: The document does not discuss or provide information about the usage of pre-configured servers tailored to specific workloads. Instead, it mentions scalability through performance tuning and horizontal scaling but doesn't specify using dedicated matching server configurations as part of that approach.",20.07738971710205,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='Approach to achieve the below system attributes\nNon-functional Requirements\n\nApproaches\n\nMinimizing latency\n\nGeographically distributed cache management systems and servers\nCDNs\nConsistency\n\nProvide unique IDs to messages using Sequencer or other mechanisms\nUse FIFO messaging queue with strict ordering\nAvailability\n\nProvide multiple WebSocket servers and managers to establish connections between users\nReplication of messages and data associated with users and groups on different servers\nFollow disaster recovery protocols\nSecurity\n\nVia end-to-end encryption\nScalability\n\nPerformance tuning of servers\nHorizontal scalability of services', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:16'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'})]","The document does not discuss or provide information about the usage of pre-configured servers tailored to specific workloads. Instead, it mentions scalability through performance tuning and horizontal scaling but doesn't specify using dedicated matching server configurations as part of that approach.",Not Applicable,Not Applicable
Is there any mention of leveraging cloud native processor VMs designed for cloud environments?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

Important Topics for WhatsApp System Design

Requirements
Capacity Estimation
High Level Design (HLD) of WhatsApp Messenger
Data Model Design:
API Design
Low Level Design (LLD) of System Design
Approach to achieve the below system attributes
Requirements
The WhatsApp messenger design should meet below requirements:

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.

---

Message service is a repository of messages on top of the Mnesia database cluster. It acts as an interface to the Mnesia database for other services interacting with the databases. It is responsible for storing and retrieving messages from the Mnesia database. It also deletes messages from the Mnesia database after a configurable amount of time. And, it exposes APIs to receive messages by various filters, such as user ID, message ID, and so on.

3. Send or receive media files
We have another service called the asset service, which is responsible for sending and receiving media files.",8.96115231513977," Response: Not applicable ✅
Judgement: No ❌
Explanation: The provided context does not discuss or reference the use of cloud-native processors specifically tailored to handle operations within a cloud environment. Instead, it details aspects related to microservices architecture and data models for WhatsApp messenger system design but lacks mention on this subject matter ✅",20.649386644363403,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='Important Topics for WhatsApp System Design\n\nRequirements\nCapacity Estimation\nHigh Level Design (HLD) of WhatsApp Messenger\nData Model Design:\nAPI Design\nLow Level Design (LLD) of System Design\nApproach to achieve the below system attributes\nRequirements\nThe WhatsApp messenger design should meet below requirements:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:1'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'}), Document(page_content='Message service is a repository of messages on top of the Mnesia database cluster. It acts as an interface to the Mnesia database for other services interacting with the databases. It is responsible for storing and retrieving messages from the Mnesia database. It also deletes messages from the Mnesia database after a configurable amount of time. And, it exposes APIs to receive messages by various filters, such as user ID, message ID, and so on.\n\n3. Send or receive media files\nWe have another service called the asset service, which is responsible for sending and receiving media files.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:12'})]","The provided context does not discuss or reference the use of cloud-native processors specifically tailored to handle operations within a cloud environment. Instead, it details aspects related to microservices architecture and data models for WhatsApp messenger system design but lacks mention on this subject matter ✅",No,No
Is there any mention of caching static data?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.",7.644855976104736," Judgement: Not Applicable

Explanation: The context provided focuses on WhatsApp's messaging system architecture involving WebSocket connections for real-time communication between users online simultaneously. It discusses the mechanisms related to file storage, message acknowledgment and delivery (sent/delivered/read), media sharing capabilities, chat history retention when offline, and push notifications upon a user coming back online but does not mention any concept of caching static data within this context.",22.205648183822632,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'})]","The context provided focuses on WhatsApp's messaging system architecture involving WebSocket connections for real-time communication between users online simultaneously. It discusses the mechanisms related to file storage, message acknowledgment and delivery (sent/delivered/read), media sharing capabilities, chat history retention when offline, and push notifications upon a user coming back online but does not mention any concept of caching static data within this context.",Not Applicable,Not Applicable
Is there any mention of compressing stored data?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.

The group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:",7.803377866744995," Response: No, in the context provided, it is not mentioned that compressed storage will be used. The media files are described to already be compressed before upload and only encryption on device side is noted without reference to compression inside blob storage or servers.
Judgement: Not Applicable
Explanation: Compression of data within the system’s infrastructure, such as stored assets in blob storage mentioned herein, was not discussed nor indicated by the context provided; thus making this question unapplicable based on given text snippets.",23.07795476913452,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.\n\nThe group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:15'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'})]","Compression of data within the system’s infrastructure, such as stored assets in blob storage mentioned herein, was not discussed nor indicated by the context provided; thus making this question unapplicable based on given text snippets.",Not Applicable,Not Applicable
Is there any mention of compressing data transmitted over networks?,"The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

Important Topics for WhatsApp System Design

Requirements
Capacity Estimation
High Level Design (HLD) of WhatsApp Messenger
Data Model Design:
API Design
Low Level Design (LLD) of System Design
Approach to achieve the below system attributes
Requirements
The WhatsApp messenger design should meet below requirements:

---

Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.

The group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.",8.285162210464478," In judgement, Yes

Explanation: The context mentions that ""The media file is compressed and encrypted on the device side."" This directly implies compression before transmission across a network to reduce bandwidth usage.",18.247790813446045,0,"[Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='Important Topics for WhatsApp System Design\n\nRequirements\nCapacity Estimation\nHigh Level Design (HLD) of WhatsApp Messenger\nData Model Design:\nAPI Design\nLow Level Design (LLD) of System Design\nApproach to achieve the below system attributes\nRequirements\nThe WhatsApp messenger design should meet below requirements:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:1'}), Document(page_content='Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.\n\nThe group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:15'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'})]","The context mentions that ""The media file is compressed and encrypted on the device side."" This directly implies compression before transmission across a network to reduce bandwidth usage.",Yes,Yes
Is there any mention of encrypting only necessary data?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

Consistency: Messages should be delivered in the order they were sent.
Availability: The system should be highly available. However, the availability can be compromised in the interest of consistency.
Security: The system must be secure via end-to-end encryption. The end-to-end encryption ensures that only the two communicating parties can see the content of messages. Nobody in between, not even WhatsApp, should have access.
Scalability: The system should be highly scalable to support an ever-increasing number of users and messages per day.
Capacity Estimation
Storage Estimation:
100 billion messages are shared through WhatsApp per day and each message takes 100 bytes on average
100 billion/day∗100 Bytes = 10 TB/day
For 30 days, the storage capacity would become the following:

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.",33.07116222381592," Judgement: Not Applicable

Explanation: The context provided does not specifically discuss encryption techniques for unnecessary data within the WhatsApp Messenger system design; instead, it mentions end-to-end encryption as a whole approach. It states that ""The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content,"" but this doesn't imply selective encryption only necessary data. Therefore, based on given context:
Judgement: Not Applicable",23.991487741470337,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='Consistency: Messages should be delivered in the order they were sent.\nAvailability: The system should be highly available. However, the availability can be compromised in the interest of consistency.\nSecurity: The system must be secure via end-to-end encryption. The end-to-end encryption ensures that only the two communicating parties can see the content of messages. Nobody in between, not even WhatsApp, should have access.\nScalability: The system should be highly scalable to support an ever-increasing number of users and messages per day.\nCapacity Estimation\nStorage Estimation:\n100 billion messages are shared through WhatsApp per day and each message takes 100 bytes on average\n100 billion/day∗100 Bytes = 10 TB/day\nFor 30 days, the storage capacity would become the following:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:3'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'})]","The context provided does not specifically discuss encryption techniques for unnecessary data within the WhatsApp Messenger system design; instead, it mentions end-to-end encryption as a whole approach. It states that ""The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content,"" but this doesn't imply selective encryption only necessary data. Therefore, based on given context:
Judgement: Not Applicable",Not Applicable,Not Applicable
Is there any mention of terminating TLS at the border gateway ?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

Important Topics for WhatsApp System Design

Requirements
Capacity Estimation
High Level Design (HLD) of WhatsApp Messenger
Data Model Design:
API Design
Low Level Design (LLD) of System Design
Approach to achieve the below system attributes
Requirements
The WhatsApp messenger design should meet below requirements:

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.

---

Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.

The group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.",7.747971057891846," Response: No
Judgement: <No>
Explanation: The provided context does not contain information regarding the termination of Transport Layer Security (TLS) protocols at a Border Gateway Protocol (BGP)-enabled router. All data traffic within and between services appears to be secured, but there is no explicit mention about terminating TLS with BGP for security or policy enforcement purposes in this context.",22.138569355010983,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='Important Topics for WhatsApp System Design\n\nRequirements\nCapacity Estimation\nHigh Level Design (HLD) of WhatsApp Messenger\nData Model Design:\nAPI Design\nLow Level Design (LLD) of System Design\nApproach to achieve the below system attributes\nRequirements\nThe WhatsApp messenger design should meet below requirements:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:1'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'}), Document(page_content='Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.\n\nThe group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:15'})]","The provided context does not contain information regarding the termination of Transport Layer Security (TLS) protocols at a Border Gateway Protocol (BGP)-enabled router. All data traffic within and between services appears to be secured, but there is no explicit mention about terminating TLS with BGP for security or policy enforcement purposes in this context.",No,No
Is there any mention of using a service mesh only if needed ?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

Important Topics for WhatsApp System Design

Requirements
Capacity Estimation
High Level Design (HLD) of WhatsApp Messenger
Data Model Design:
API Design
Low Level Design (LLD) of System Design
Approach to achieve the below system attributes
Requirements
The WhatsApp messenger design should meet below requirements:

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.

---

Consistency: Messages should be delivered in the order they were sent.
Availability: The system should be highly available. However, the availability can be compromised in the interest of consistency.
Security: The system must be secure via end-to-end encryption. The end-to-end encryption ensures that only the two communicating parties can see the content of messages. Nobody in between, not even WhatsApp, should have access.
Scalability: The system should be highly scalable to support an ever-increasing number of users and messages per day.
Capacity Estimation
Storage Estimation:
100 billion messages are shared through WhatsApp per day and each message takes 100 bytes on average
100 billion/day∗100 Bytes = 10 TB/day
For 30 days, the storage capacity would become the following:

---

Approach to achieve the below system attributes
Non-functional Requirements

Approaches

Minimizing latency

Geographically distributed cache management systems and servers
CDNs
Consistency

Provide unique IDs to messages using Sequencer or other mechanisms
Use FIFO messaging queue with strict ordering
Availability

Provide multiple WebSocket servers and managers to establish connections between users
Replication of messages and data associated with users and groups on different servers
Follow disaster recovery protocols
Security

Via end-to-end encryption
Scalability

Performance tuning of servers
Horizontal scalability of services",7.737289190292358," Response: No, the context provided does not specifically state that a service mesh is used or required. 
Judgement: Not Applicable
Explanation: The excerpt from my design document discusses various architectural choices and technologies like microservices architecture, WebSocket servers for communication between users in real-time chat functionality of WhatsApp Messenger but does not mention or indicate the use of a service mesh. A Service mesh is often employed to manage how different parts of an application communicate with each other - typically used when services need fine-grained control over networking, security and observability aspects among them which are also called as 'sidecar' patterns where every container has its own sidecar proxy handling these tasks for that service. However in the absence of any explicit mention or inference about this approach within given context it cannot be confirmed whether a Service mesh is used only if needed herein my design document excerpt and hence, judgement as 'Not Applicable'.",32.63451886177063,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='Important Topics for WhatsApp System Design\n\nRequirements\nCapacity Estimation\nHigh Level Design (HLD) of WhatsApp Messenger\nData Model Design:\nAPI Design\nLow Level Design (LLD) of System Design\nApproach to achieve the below system attributes\nRequirements\nThe WhatsApp messenger design should meet below requirements:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:1'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'}), Document(page_content='Consistency: Messages should be delivered in the order they were sent.\nAvailability: The system should be highly available. However, the availability can be compromised in the interest of consistency.\nSecurity: The system must be secure via end-to-end encryption. The end-to-end encryption ensures that only the two communicating parties can see the content of messages. Nobody in between, not even WhatsApp, should have access.\nScalability: The system should be highly scalable to support an ever-increasing number of users and messages per day.\nCapacity Estimation\nStorage Estimation:\n100 billion messages are shared through WhatsApp per day and each message takes 100 bytes on average\n100 billion/day∗100 Bytes = 10 TB/day\nFor 30 days, the storage capacity would become the following:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:3'}), Document(page_content='Approach to achieve the below system attributes\nNon-functional Requirements\n\nApproaches\n\nMinimizing latency\n\nGeographically distributed cache management systems and servers\nCDNs\nConsistency\n\nProvide unique IDs to messages using Sequencer or other mechanisms\nUse FIFO messaging queue with strict ordering\nAvailability\n\nProvide multiple WebSocket servers and managers to establish connections between users\nReplication of messages and data associated with users and groups on different servers\nFollow disaster recovery protocols\nSecurity\n\nVia end-to-end encryption\nScalability\n\nPerformance tuning of servers\nHorizontal scalability of services', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:16'})]","The excerpt from my design document discusses various architectural choices and technologies like microservices architecture, WebSocket servers for communication between users in real-time chat functionality of WhatsApp Messenger but does not mention or indicate the use of a service mesh. A Service mesh is often employed to manage how different parts of an application communicate with each other - typically used when services need fine-grained control over networking, security and observability aspects among them which are also called as 'sidecar' patterns where every container has its own sidecar proxy handling these tasks for that service. However in the absence of any explicit mention or inference about this approach within given context it cannot be confirmed whether a Service mesh is used only if needed herein my design document excerpt and hence, judgement as 'Not Applicable'.",Not Applicable,Not Applicable
Is there any mention of implementing a stateless design?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.",31.743767261505127," Response: Not applicable
Judgement: <Not Applicable>
Explanation: The context provided does not discuss or suggest using a stateless design in the software development for WhatsApp Messenger, hence it's not relevant to this technique.",18.647021293640137,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'})]","The context provided does not discuss or suggest using a stateless design in the software development for WhatsApp Messenger, hence it's not relevant to this technique.",Not Applicable,Not Applicable
Is there any mention of matching service level objectives to business needs?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

Important Topics for WhatsApp System Design

Requirements
Capacity Estimation
High Level Design (HLD) of WhatsApp Messenger
Data Model Design:
API Design
Low Level Design (LLD) of System Design
Approach to achieve the below system attributes
Requirements
The WhatsApp messenger design should meet below requirements:

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.

---

Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.

The group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.",7.766811847686768," Judgement: Not Applicable

Explanation: The provided context does not discuss anything related to Service Level Objectives (SLOs) or how they are matched with the company's specific business requirements. It mostly talks about software design, architecture of WhatsApp Messenger including its microservices and components involved in messaging services such as WebSocket server, message service etc., group communication mechanisms along with data management aspects like storage on Redis or MySQL database cluster and blob storage for media files. Thus, the question does not apply to this context based on what is discussed herein.",25.163182258605957,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='Important Topics for WhatsApp System Design\n\nRequirements\nCapacity Estimation\nHigh Level Design (HLD) of WhatsApp Messenger\nData Model Design:\nAPI Design\nLow Level Design (LLD) of System Design\nApproach to achieve the below system attributes\nRequirements\nThe WhatsApp messenger design should meet below requirements:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:1'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'}), Document(page_content='Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.\n\nThe group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:15'})]","The provided context does not discuss anything related to Service Level Objectives (SLOs) or how they are matched with the company's specific business requirements. It mostly talks about software design, architecture of WhatsApp Messenger including its microservices and components involved in messaging services such as WebSocket server, message service etc., group communication mechanisms along with data management aspects like storage on Redis or MySQL database cluster and blob storage for media files. Thus, the question does not apply to this context based on what is discussed herein.",Not Applicable,Not Applicable
Is there any mention of optimizing the size of AI/ML models?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.

The group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.",8.539622068405151," Response: Not applicable
Judgement: <Not Applicable>
Explanation: The provided context discusses various aspects such as microservices architecture, connection with websocket servers for real-time messaging and data sharing in WhatsApp. However, there is no mention of optimizing AI/ML models within this text snippet regarding software development processes or any other technical aspect discussed herein.",21.119014263153076,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.\n\nThe group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:15'})]","The provided context discusses various aspects such as microservices architecture, connection with websocket servers for real-time messaging and data sharing in WhatsApp. However, there is no mention of optimizing AI/ML models within this text snippet regarding software development processes or any other technical aspect discussed herein.",Not Applicable,Not Applicable
Is there any mention of leveraging pre-trained models and transfer learning?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.

---

Approach to achieve the below system attributes
Non-functional Requirements

Approaches

Minimizing latency

Geographically distributed cache management systems and servers
CDNs
Consistency

Provide unique IDs to messages using Sequencer or other mechanisms
Use FIFO messaging queue with strict ordering
Availability

Provide multiple WebSocket servers and managers to establish connections between users
Replication of messages and data associated with users and groups on different servers
Follow disaster recovery protocols
Security

Via end-to-end encryption
Scalability

Performance tuning of servers
Horizontal scalability of services",8.433400869369507," In response to the absence of information about using pre-trained models and transfer learning in my design for software development, I would say: No. 

In Explanation: The context provided discusses various aspects such as architectural choices like microservices architecture, communication protocols (WebSocket), media file handling including compression, encryption, storage on blob service along with CDN usage and message delivery mechanisms in the system design for WhatsApp Messenger. However, there is no mention of employing pre-trained models or transfer learning techniques within this context as these are more commonly related to machine learning aspects which haven't been explicitly addressed herein.",26.537543773651123,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'}), Document(page_content='Approach to achieve the below system attributes\nNon-functional Requirements\n\nApproaches\n\nMinimizing latency\n\nGeographically distributed cache management systems and servers\nCDNs\nConsistency\n\nProvide unique IDs to messages using Sequencer or other mechanisms\nUse FIFO messaging queue with strict ordering\nAvailability\n\nProvide multiple WebSocket servers and managers to establish connections between users\nReplication of messages and data associated with users and groups on different servers\nFollow disaster recovery protocols\nSecurity\n\nVia end-to-end encryption\nScalability\n\nPerformance tuning of servers\nHorizontal scalability of services', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:16'})]","The context provided discusses various aspects such as architectural choices like microservices architecture, communication protocols (WebSocket), media file handling including compression, encryption, storage on blob service along with CDN usage and message delivery mechanisms in the system design for WhatsApp Messenger. However, there is no mention of employing pre-trained models or transfer learning techniques within this context as these are more commonly related to machine learning aspects which haven't been explicitly addressed herein.",No,No
Is there any mention of using AI/ML models that consume less energy while maintaining performance?,"The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

Message service is a repository of messages on top of the Mnesia database cluster. It acts as an interface to the Mnesia database for other services interacting with the databases. It is responsible for storing and retrieving messages from the Mnesia database. It also deletes messages from the Mnesia database after a configurable amount of time. And, it exposes APIs to receive messages by various filters, such as user ID, message ID, and so on.

3. Send or receive media files
We have another service called the asset service, which is responsible for sending and receiving media files.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

Approach to achieve the below system attributes
Non-functional Requirements

Approaches

Minimizing latency

Geographically distributed cache management systems and servers
CDNs
Consistency

Provide unique IDs to messages using Sequencer or other mechanisms
Use FIFO messaging queue with strict ordering
Availability

Provide multiple WebSocket servers and managers to establish connections between users
Replication of messages and data associated with users and groups on different servers
Follow disaster recovery protocols
Security

Via end-to-end encryption
Scalability

Performance tuning of servers
Horizontal scalability of services

---

Designing Whatsapp Messenger | System Design
Last Updated : 18 Mar, 2024
Ever thought about how this widely-used messaging app actually works behind the scenes? This article is your guide to the system design of WhatsApp. From handling tons of messages to making sure your chats are secure, we’ll explore the technical aspects that keep this app running smoothly and managing things like managing data, keeping your messages private, and the challenges of making sure your texts arrive lightning-fast.

Designing-WhatsApp-Messenger--System-Design

Important Topics for WhatsApp System Design",9.220540761947632," In response to your inquiry, the provided context does not include any specific information or mentions about employing Artificial Intelligence (AI) or Machine Learning (ML) models for conserving energy without compromising on system efficiency and performance. Therefore:

Judgement: <No> 

Explanation: The document focuses heavily on the technical aspects of WhatsApp's operation, such as handling messages efficiently, maintaining security via end-to-end encryption, achieving scalability through server tuning and horizontal scaling. However, it doesn’t mention about incorporating AI/ML models for energy conservation while keeping up performance levels. Therefore the answer is No based on provided context.",28.975966215133667,0,"[Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='Message service is a repository of messages on top of the Mnesia database cluster. It acts as an interface to the Mnesia database for other services interacting with the databases. It is responsible for storing and retrieving messages from the Mnesia database. It also deletes messages from the Mnesia database after a configurable amount of time. And, it exposes APIs to receive messages by various filters, such as user ID, message ID, and so on.\n\n3. Send or receive media files\nWe have another service called the asset service, which is responsible for sending and receiving media files.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:12'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='Approach to achieve the below system attributes\nNon-functional Requirements\n\nApproaches\n\nMinimizing latency\n\nGeographically distributed cache management systems and servers\nCDNs\nConsistency\n\nProvide unique IDs to messages using Sequencer or other mechanisms\nUse FIFO messaging queue with strict ordering\nAvailability\n\nProvide multiple WebSocket servers and managers to establish connections between users\nReplication of messages and data associated with users and groups on different servers\nFollow disaster recovery protocols\nSecurity\n\nVia end-to-end encryption\nScalability\n\nPerformance tuning of servers\nHorizontal scalability of services', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:16'}), Document(page_content='Designing Whatsapp Messenger | System Design\nLast Updated : 18 Mar, 2024\nEver thought about how this widely-used messaging app actually works behind the scenes? This article is your guide to the system design of WhatsApp. From handling tons of messages to making sure your chats are secure, we’ll explore the technical aspects that keep this app running smoothly and managing things like managing data, keeping your messages private, and the challenges of making sure your texts arrive lightning-fast.\n\nDesigning-WhatsApp-Messenger--System-Design\n\nImportant Topics for WhatsApp System Design', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:0'})]","The document focuses heavily on the technical aspects of WhatsApp's operation, such as handling messages efficiently, maintaining security via end-to-end encryption, achieving scalability through server tuning and horizontal scaling. However, it doesn’t mention about incorporating AI/ML models for energy conservation while keeping up performance levels. Therefore the answer is No based on provided context.",No,No
Is there any mention of deploying AI models on edge devices?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.",33.41457438468933," Response: Not applicable
Judgement: <Not Applicable>
Explanation: The context provided discusses various aspects related to a messaging service's architecture but does not include information about deploying artificial intelligence (AI) models. Therefore, the judgement is that this application is not applicable concerning AI deployment on edge devices within the given design document excerpt.",20.306312799453735,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'})]","The context provided discusses various aspects related to a messaging service's architecture but does not include information about deploying artificial intelligence (AI) models. Therefore, the judgement is that this application is not applicable concerning AI deployment on edge devices within the given design document excerpt.",Not Applicable,Not Applicable
Is there any mention of adopting a serverless architecture for AI/ML workload processes ?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

Important Topics for WhatsApp System Design

Requirements
Capacity Estimation
High Level Design (HLD) of WhatsApp Messenger
Data Model Design:
API Design
Low Level Design (LLD) of System Design
Approach to achieve the below system attributes
Requirements
The WhatsApp messenger design should meet below requirements:

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

Message service is a repository of messages on top of the Mnesia database cluster. It acts as an interface to the Mnesia database for other services interacting with the databases. It is responsible for storing and retrieving messages from the Mnesia database. It also deletes messages from the Mnesia database after a configurable amount of time. And, it exposes APIs to receive messages by various filters, such as user ID, message ID, and so on.

3. Send or receive media files
We have another service called the asset service, which is responsible for sending and receiving media files.",8.640752077102661," Response: No
Judgement: Not Applicable (NA)
Explanation: The context provided discusses the use of microservices, WebSocket servers, and various other services such as Mnesia database cluster and message service in WhatsApp. However, there is no mention or indication towards adopting a serverless architecture for AI/ML workload processes within this excerpt.",21.220796823501587,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='Important Topics for WhatsApp System Design\n\nRequirements\nCapacity Estimation\nHigh Level Design (HLD) of WhatsApp Messenger\nData Model Design:\nAPI Design\nLow Level Design (LLD) of System Design\nApproach to achieve the below system attributes\nRequirements\nThe WhatsApp messenger design should meet below requirements:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:1'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='Message service is a repository of messages on top of the Mnesia database cluster. It acts as an interface to the Mnesia database for other services interacting with the databases. It is responsible for storing and retrieving messages from the Mnesia database. It also deletes messages from the Mnesia database after a configurable amount of time. And, it exposes APIs to receive messages by various filters, such as user ID, message ID, and so on.\n\n3. Send or receive media files\nWe have another service called the asset service, which is responsible for sending and receiving media files.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:12'})]","The context provided discusses the use of microservices, WebSocket servers, and various other services such as Mnesia database cluster and message service in WhatsApp. However, there is no mention or indication towards adopting a serverless architecture for AI/ML workload processes within this excerpt.",Not Applicable,Not Applicable
Is there any mention of using efficient file formats like Parquet or any other efficient format?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

Approach to achieve the below system attributes
Non-functional Requirements

Approaches

Minimizing latency

Geographically distributed cache management systems and servers
CDNs
Consistency

Provide unique IDs to messages using Sequencer or other mechanisms
Use FIFO messaging queue with strict ordering
Availability

Provide multiple WebSocket servers and managers to establish connections between users
Replication of messages and data associated with users and groups on different servers
Follow disaster recovery protocols
Security

Via end-to-end encryption
Scalability

Performance tuning of servers
Horizontal scalability of services

---

Designing Whatsapp Messenger | System Design
Last Updated : 18 Mar, 2024
Ever thought about how this widely-used messaging app actually works behind the scenes? This article is your guide to the system design of WhatsApp. From handling tons of messages to making sure your chats are secure, we’ll explore the technical aspects that keep this app running smoothly and managing things like managing data, keeping your messages private, and the challenges of making sure your texts arrive lightning-fast.

Designing-WhatsApp-Messenger--System-Design

Important Topics for WhatsApp System Design

---

Message service is a repository of messages on top of the Mnesia database cluster. It acts as an interface to the Mnesia database for other services interacting with the databases. It is responsible for storing and retrieving messages from the Mnesia database. It also deletes messages from the Mnesia database after a configurable amount of time. And, it exposes APIs to receive messages by various filters, such as user ID, message ID, and so on.

3. Send or receive media files
We have another service called the asset service, which is responsible for sending and receiving media files.",8.587097644805908," Response: No
Judgement: <No>
Explanation: The context does not specify the use of parquet or any other particular file format for efficiency in handling media files. It merely mentions that compressed and encrypted media are sent to blob storage, with an ID assigned by the asset service used later during download requests.",21.40112018585205,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='Approach to achieve the below system attributes\nNon-functional Requirements\n\nApproaches\n\nMinimizing latency\n\nGeographically distributed cache management systems and servers\nCDNs\nConsistency\n\nProvide unique IDs to messages using Sequencer or other mechanisms\nUse FIFO messaging queue with strict ordering\nAvailability\n\nProvide multiple WebSocket servers and managers to establish connections between users\nReplication of messages and data associated with users and groups on different servers\nFollow disaster recovery protocols\nSecurity\n\nVia end-to-end encryption\nScalability\n\nPerformance tuning of servers\nHorizontal scalability of services', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:16'}), Document(page_content='Designing Whatsapp Messenger | System Design\nLast Updated : 18 Mar, 2024\nEver thought about how this widely-used messaging app actually works behind the scenes? This article is your guide to the system design of WhatsApp. From handling tons of messages to making sure your chats are secure, we’ll explore the technical aspects that keep this app running smoothly and managing things like managing data, keeping your messages private, and the challenges of making sure your texts arrive lightning-fast.\n\nDesigning-WhatsApp-Messenger--System-Design\n\nImportant Topics for WhatsApp System Design', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:0'}), Document(page_content='Message service is a repository of messages on top of the Mnesia database cluster. It acts as an interface to the Mnesia database for other services interacting with the databases. It is responsible for storing and retrieving messages from the Mnesia database. It also deletes messages from the Mnesia database after a configurable amount of time. And, it exposes APIs to receive messages by various filters, such as user ID, message ID, and so on.\n\n3. Send or receive media files\nWe have another service called the asset service, which is responsible for sending and receiving media files.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:12'})]","The context does not specify the use of parquet or any other particular file format for efficiency in handling media files. It merely mentions that compressed and encrypted media are sent to blob storage, with an ID assigned by the asset service used later during download requests.",No,No
"Is there any mention of selecting a more energy-efficient AI/ML framework, such as those built on programming languages like C/C++?","Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

For 30 days, the storage capacity would become the following:
30∗10 TB/day = 300 TB/month

---

users: This table will contain a user’s information such as name, phoneNumber, and other details.
messages: This table will store messages with properties such as type (text, image, video, etc.), content, and timestamps for message delivery. The message will also have a corresponding chatID or groupID.
chats: This table basically represents a private chat between two users and can contain multiple messages.
users_chats: This table maps users and chats as multiple users can have multiple chats (N:M relationship) and vice versa.
groups: This table represents a group between multiple users.
users_groups: This table maps users and groups as multiple users can be a part of multiple groups (N:M relationship) and vice versa.
API Design
Send message

---

Message service is a repository of messages on top of the Mnesia database cluster. It acts as an interface to the Mnesia database for other services interacting with the databases. It is responsible for storing and retrieving messages from the Mnesia database. It also deletes messages from the Mnesia database after a configurable amount of time. And, it exposes APIs to receive messages by various filters, such as user ID, message ID, and so on.

3. Send or receive media files
We have another service called the asset service, which is responsible for sending and receiving media files.

---

Designing Whatsapp Messenger | System Design
Last Updated : 18 Mar, 2024
Ever thought about how this widely-used messaging app actually works behind the scenes? This article is your guide to the system design of WhatsApp. From handling tons of messages to making sure your chats are secure, we’ll explore the technical aspects that keep this app running smoothly and managing things like managing data, keeping your messages private, and the challenges of making sure your texts arrive lightning-fast.

Designing-WhatsApp-Messenger--System-Design

Important Topics for WhatsApp System Design

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.",5.797032356262207," Response: No
Judgement: <No>
Explanation: The context provided does not discuss the use of specific technologies for supporting green practices or anything related to artificial intelligence and machine learning frameworks in software development. It focuses more on various system functionalities, architecture design choices (like microservices), database selection and usage, data storage strategies, media file handling mechanisms, etc., rather than energy efficiency aspects within AI/ML implementations using C/C++ languages or other programming technologies.",24.726614236831665,0,"[Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='For 30 days, the storage capacity would become the following:\n30∗10 TB/day = 300 TB/month', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:4'}), Document(page_content='users: This table will contain a user’s information such as name, phoneNumber, and other details.\nmessages: This table will store messages with properties such as type (text, image, video, etc.), content, and timestamps for message delivery. The message will also have a corresponding chatID or groupID.\nchats: This table basically represents a private chat between two users and can contain multiple messages.\nusers_chats: This table maps users and chats as multiple users can have multiple chats (N:M relationship) and vice versa.\ngroups: This table represents a group between multiple users.\nusers_groups: This table maps users and groups as multiple users can be a part of multiple groups (N:M relationship) and vice versa.\nAPI Design\nSend message', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:7'}), Document(page_content='Message service is a repository of messages on top of the Mnesia database cluster. It acts as an interface to the Mnesia database for other services interacting with the databases. It is responsible for storing and retrieving messages from the Mnesia database. It also deletes messages from the Mnesia database after a configurable amount of time. And, it exposes APIs to receive messages by various filters, such as user ID, message ID, and so on.\n\n3. Send or receive media files\nWe have another service called the asset service, which is responsible for sending and receiving media files.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:12'}), Document(page_content='Designing Whatsapp Messenger | System Design\nLast Updated : 18 Mar, 2024\nEver thought about how this widely-used messaging app actually works behind the scenes? This article is your guide to the system design of WhatsApp. From handling tons of messages to making sure your chats are secure, we’ll explore the technical aspects that keep this app running smoothly and managing things like managing data, keeping your messages private, and the challenges of making sure your texts arrive lightning-fast.\n\nDesigning-WhatsApp-Messenger--System-Design\n\nImportant Topics for WhatsApp System Design', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:0'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'})]","The context provided does not discuss the use of specific technologies for supporting green practices or anything related to artificial intelligence and machine learning frameworks in software development. It focuses more on various system functionalities, architecture design choices (like microservices), database selection and usage, data storage strategies, media file handling mechanisms, etc., rather than energy efficiency aspects within AI/ML implementations using C/C++ languages or other programming technologies.",No,No
Is there any mention of training AI models in cloud regions with lower carbon intensity?,"The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

Functional Requirement
Conversation: The system should support one-on-one and group conversations between users.
Acknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.
Sharing: The system should support sharing of media files, such as images, videos, and audio.
Chat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.
Push notifications: The system should be able to notify offline users of new messages once their status becomes online.
Non-Functional Requirement
Low latency: Users should be able to receive messages with low latency.
Consistency: Messages should be delivered in the order they were sent.

---

Message service is a repository of messages on top of the Mnesia database cluster. It acts as an interface to the Mnesia database for other services interacting with the databases. It is responsible for storing and retrieving messages from the Mnesia database. It also deletes messages from the Mnesia database after a configurable amount of time. And, it exposes APIs to receive messages by various filters, such as user ID, message ID, and so on.

3. Send or receive media files
We have another service called the asset service, which is responsible for sending and receiving media files.

---

Bandwidth Estimation:
According to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.
10 TB/86400sec ≈ 926Mb/s

Number of servers estimation:
WhatsApp handles around 10 million connections on a single server, which seems quite high for a server.
No. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers
So, according to the above estimates, we require 200 chat servers.

High Level Design (HLD) of WhatsApp Messenger
High-Level-Design-(HLD)-of-WhatsApp-Messenger

The following steps describe the communication between both clients:

---

Important Topics for WhatsApp System Design

Requirements
Capacity Estimation
High Level Design (HLD) of WhatsApp Messenger
Data Model Design:
API Design
Low Level Design (LLD) of System Design
Approach to achieve the below system attributes
Requirements
The WhatsApp messenger design should meet below requirements:

---

Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.

The group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.",8.503581047058105," Response: No
Judgement: <No>
Explanation: The provided context does not discuss or include details about training artificial intelligence (AI) models specifically within cloud computing environments that prioritize low-carbon emissions. All technical and design aspects mentioned pertain to the software infrastructure for a messaging system, without reference to environmental considerations in AI model development processes.",22.546627044677734,0,"[Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='Functional Requirement\nConversation: The system should support one-on-one and group conversations between users.\nAcknowledgment: The system should support message delivery acknowledgment, such as sent, delivered, and read.\nSharing: The system should support sharing of media files, such as images, videos, and audio.\nChat storage: The system must support the persistent storage of chat messages when a user is offline until the successful delivery of messages.\nPush notifications: The system should be able to notify offline users of new messages once their status becomes online.\nNon-Functional Requirement\nLow latency: Users should be able to receive messages with low latency.\nConsistency: Messages should be delivered in the order they were sent.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:2'}), Document(page_content='Message service is a repository of messages on top of the Mnesia database cluster. It acts as an interface to the Mnesia database for other services interacting with the databases. It is responsible for storing and retrieving messages from the Mnesia database. It also deletes messages from the Mnesia database after a configurable amount of time. And, it exposes APIs to receive messages by various filters, such as user ID, message ID, and so on.\n\n3. Send or receive media files\nWe have another service called the asset service, which is responsible for sending and receiving media files.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:12'}), Document(page_content='Bandwidth Estimation:\nAccording to the storage capacity estimation, our service will get 10TB of data each day, giving us a bandwidth of 926 Mb/s.\n10 TB/86400sec ≈ 926Mb/s\n\nNumber of servers estimation:\nWhatsApp handles around 10 million connections on a single server, which seems quite high for a server.\nNo. of servers = Total connections per day/No. of connections per server = 2 billion/10 million = 200 servers\nSo, according to the above estimates, we require 200 chat servers.\n\nHigh Level Design (HLD) of WhatsApp Messenger\nHigh-Level-Design-(HLD)-of-WhatsApp-Messenger\n\nThe following steps describe the communication between both clients:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:5'}), Document(page_content='Important Topics for WhatsApp System Design\n\nRequirements\nCapacity Estimation\nHigh Level Design (HLD) of WhatsApp Messenger\nData Model Design:\nAPI Design\nLow Level Design (LLD) of System Design\nApproach to achieve the below system attributes\nRequirements\nThe WhatsApp messenger design should meet below requirements:', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:1'}), Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.\n\nThe group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:15'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'})]","The provided context does not discuss or include details about training artificial intelligence (AI) models specifically within cloud computing environments that prioritize low-carbon emissions. All technical and design aspects mentioned pertain to the software infrastructure for a messaging system, without reference to environmental considerations in AI model development processes.",No,No
Is there any mention of selecting the right hardware or VM instance types?,"Download Media File
downloadFile(user_id, file_id)

Architecture
We will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.

Low Level Design (LLD) of System Design
Low-Level-Design(LLD)-of-WhatsApp-Messenger

1. Connection with Websocket Server
In WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.

---

The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.

2. Send or receive messages
The WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.

---

The media file is compressed and encrypted on the device side.
The compressed and encrypted file is sent to the asset service to store the file on blob storage.
The asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.
For example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.
The asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.
The content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.

---

Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.

The group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.

---

4. Support for Group messages
Since user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.

---

Message service is a repository of messages on top of the Mnesia database cluster. It acts as an interface to the Mnesia database for other services interacting with the databases. It is responsible for storing and retrieving messages from the Mnesia database. It also deletes messages from the Mnesia database after a configurable amount of time. And, it exposes APIs to receive messages by various filters, such as user ID, message ID, and so on.

3. Send or receive media files
We have another service called the asset service, which is responsible for sending and receiving media files.

---

Approach to achieve the below system attributes
Non-functional Requirements

Approaches

Minimizing latency

Geographically distributed cache management systems and servers
CDNs
Consistency

Provide unique IDs to messages using Sequencer or other mechanisms
Use FIFO messaging queue with strict ordering
Availability

Provide multiple WebSocket servers and managers to establish connections between users
Replication of messages and data associated with users and groups on different servers
Follow disaster recovery protocols
Security

Via end-to-end encryption
Scalability

Performance tuning of servers
Horizontal scalability of services",8.149516820907593," Response: No
Judgement: <No>
Explanation: The context provided does not discuss specifics about choosing appropriate server instances, focusing instead on software design and architecture aspects like microservices and WebSocket servers. Hardware selection is outside of this scope.",18.87694263458252,0,"[Document(page_content='Download Media File\ndownloadFile(user_id, file_id)\n\nArchitecture\nWe will be using microservices architecture since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model.\n\nLow Level Design (LLD) of System Design\nLow-Level-Design(LLD)-of-WhatsApp-Messenger\n\n1. Connection with Websocket Server\nIn WhatsApp, each active device is connected with a WebSocket server via WebSocket protocol. A WebSocket server keeps the connection open with all the active (online) users. Since one server isn’t enough to handle billions of devices, there should be enough servers to handle billions of users.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:10'}), Document(page_content='The responsibility of each of these servers is to provide a port to every online user. The mapping between servers, ports, and users is stored in the WebSocket manager that resides on top of a cluster of the data store. In this case, that’s Redis.\n\n2. Send or receive messages\nThe WebSocket manager is responsible for maintaining a mapping between an active user and a port assigned to the user. Whenever a user is connected to another WebSocket server, this information will be updated in the data store. A WebSocket server also communicates with another service called message service.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:11'}), Document(page_content='The media file is compressed and encrypted on the device side.\nThe compressed and encrypted file is sent to the asset service to store the file on blob storage.\nThe asset service assigns an ID that’s communicated with the sender. The asset service also maintains a hash for each file to avoid duplication of content on the blob storage.\nFor example, if a user wants to upload an image that’s already there in the blob storage, the image won’t be uploaded. Instead, the same ID is forwarded to the receiver.\nThe asset service sends the ID of media files to the receiver via the message service. The receiver downloads the media file from the blob storage using the ID.\nThe content is loaded onto a CDN if the asset service receives a large number of requests for some particular content.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:13'}), Document(page_content='Now, here comes the responsibility of the group service. The group service keeps all information about users in each group in the system. It has all the information about each group, including user IDs, group ID, status, group icon, number of users, and so on. This service resides on top of the MySQL database cluster, with multiple secondary replicas distributed geographically. A Redis cache server also exists to cache data from the MySQL servers. Both geographically distributed replicas and Redis cache aid in reducing latency.\n\nThe group message handler communicates with the group service to retrieve data of Group/A users. In the last step, the group message handler follows the same process as a WebSocket server and delivers the message to each user.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:15'}), Document(page_content='4. Support for Group messages\nSince user A is connected to a WebSocket server, it sends a message to the message service intended for Group A.The message service sends the message to Kafka with other specific information about the group. The message is saved there for further processing. In Kafka terminology, a group can be a topic, and the senders and receivers can be producers and consumers, respectively.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:14'}), Document(page_content='Message service is a repository of messages on top of the Mnesia database cluster. It acts as an interface to the Mnesia database for other services interacting with the databases. It is responsible for storing and retrieving messages from the Mnesia database. It also deletes messages from the Mnesia database after a configurable amount of time. And, it exposes APIs to receive messages by various filters, such as user ID, message ID, and so on.\n\n3. Send or receive media files\nWe have another service called the asset service, which is responsible for sending and receiving media files.', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:12'}), Document(page_content='Approach to achieve the below system attributes\nNon-functional Requirements\n\nApproaches\n\nMinimizing latency\n\nGeographically distributed cache management systems and servers\nCDNs\nConsistency\n\nProvide unique IDs to messages using Sequencer or other mechanisms\nUse FIFO messaging queue with strict ordering\nAvailability\n\nProvide multiple WebSocket servers and managers to establish connections between users\nReplication of messages and data associated with users and groups on different servers\nFollow disaster recovery protocols\nSecurity\n\nVia end-to-end encryption\nScalability\n\nPerformance tuning of servers\nHorizontal scalability of services', metadata={'source': 'documentsFromText/Whatsapp/content.txt', 'id': 'documentsFromText/Whatsapp/content.txt:None:16'})]","The context provided does not discuss specifics about choosing appropriate server instances, focusing instead on software design and architecture aspects like microservices and WebSocket servers. Hardware selection is outside of this scope.",No,No
