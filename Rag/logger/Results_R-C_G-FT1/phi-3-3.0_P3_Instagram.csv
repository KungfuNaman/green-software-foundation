query,context_text,context_time_ms,response_text,response_time_ms,db_time_ms,similarity_results
Is there any mention of minimizing the total number of deployed environments?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

Post photos and videos: The users can post photos and videos on Instagram.
Follow and unfollow users: The users can follow and unfollow other users on Instagram.
Like or dislike posts: The users can like or dislike posts of the accounts they follow.
Search photos and videos: The users can search photos and videos based on captions and location.
Generate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.
2.2 Non-Functional requirements for Instagram System Design
Scalability: The system should be scalable to handle millions of users in terms of computational resources and storage.
Latency: The latency to generate a news feed should be low.
Availability: The system should be highly available.

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld

---

Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.
11. Conclusion
In this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content",5.18927788734436," No

Explanation: Microservices architecture promotes deploying multiple independent services, which may not always aim at reducing deployment count. Instead, it focuses on scalability, reliability, and independence.",6.991858005523682,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Post photos and videos: The users can post photos and videos on Instagram.\nFollow and unfollow users: The users can follow and unfollow other users on Instagram.\nLike or dislike posts: The users can like or dislike posts of the accounts they follow.\nSearch photos and videos: The users can search photos and videos based on captions and location.\nGenerate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.\n2.2 Non-Functional requirements for Instagram System Design\nScalability: The system should be scalable to handle millions of users in terms of computational resources and storage.\nLatency: The latency to generate a news feed should be low.\nAvailability: The system should be highly available.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:3', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.\n11. Conclusion\nIn this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content', metadata={'id': 'documentsFromText/Instagram/content.txt:None:27', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of optimizing storage utilization?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""
headers = {
    ""Authorization"": ""Bearer YOUR_ACCESS_TOKEN""  # Replace with your access token
}
data = {
    ""filters"": {
        ""mediaTypes"": [""PHOTO"", ""VIDEO""]  # Search for both photos and videos
    }
}
response = requests.post(url, headers=headers, json=data)
 
if response.status_code == 200:
    results = response.json()
    # Process the search results
else:
    print(""Error:"", response.status_code, response.text)
8. Database Design for Instagram Database Design
We need the following tables to store our data:

---

Availability: The system should be highly available.
Durability: Any uploaded content (photos and videos) should never get lost.
Consistency: We can compromise a little on consistency. It is acceptable if the content (photos or videos) takes time to show in followers’ feeds located in a distant region.
Reliability: The system must be able to tolerate hardware and software failures.
3. Capacity Estimation for Instagram System Design
We have 1 billion users, with 500 million as daily active users. Assume 60 million photos and 35 million videos are shared on Instagram per day. We can consider 3 MB as the maximum size of each photo and 150 MB as the maximum size of each video uploaded on Instagram.On average, each user sends 20 requests (of any type) per day to our service.

---

import requests
 
url_like = f""https://api.instagram.com/media/likes/{media_id}""
url_unlike = f""https://api.instagram.com/media/likes/{media_id}""
headers = {'Authorization': f'Bearer {access_token}'}
 
# Like a post
response_like = requests.post(url_like, headers=headers)
 
# Unlike a post
response_unlike = requests.delete(url_unlike, headers=headers)
7.4 Search photos and videos
Search Endpoint:
Typically a POST request to a /search endpoint.
Query parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)
import requests
 
url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""
headers = {

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld",4.929109811782837, Yes,6.105234146118164,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""\nheaders = {\n    ""Authorization"": ""Bearer YOUR_ACCESS_TOKEN""  # Replace with your access token\n}\ndata = {\n    ""filters"": {\n        ""mediaTypes"": [""PHOTO"", ""VIDEO""]  # Search for both photos and videos\n    }\n}\nresponse = requests.post(url, headers=headers, json=data)\n \nif response.status_code == 200:\n    results = response.json()\n    # Process the search results\nelse:\n    print(""Error:"", response.status_code, response.text)\n8. Database Design for Instagram Database Design\nWe need the following tables to store our data:', metadata={'id': 'documentsFromText/Instagram/content.txt:None:21', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Availability: The system should be highly available.\nDurability: Any uploaded content (photos and videos) should never get lost.\nConsistency: We can compromise a little on consistency. It is acceptable if the content (photos or videos) takes time to show in followers’ feeds located in a distant region.\nReliability: The system must be able to tolerate hardware and software failures.\n3. Capacity Estimation for Instagram System Design\nWe have 1 billion users, with 500 million as daily active users. Assume 60 million photos and 35 million videos are shared on Instagram per day. We can consider 3 MB as the maximum size of each photo and 150 MB as the maximum size of each video uploaded on Instagram.On average, each user sends 20 requests (of any type) per day to our service.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:4', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='import requests\n \nurl_like = f""https://api.instagram.com/media/likes/{media_id}""\nurl_unlike = f""https://api.instagram.com/media/likes/{media_id}""\nheaders = {\'Authorization\': f\'Bearer {access_token}\'}\n \n# Like a post\nresponse_like = requests.post(url_like, headers=headers)\n \n# Unlike a post\nresponse_unlike = requests.delete(url_unlike, headers=headers)\n7.4 Search photos and videos\nSearch Endpoint:\nTypically a POST request to a /search endpoint.\nQuery parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)\nimport requests\n \nurl = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""\nheaders = {', metadata={'id': 'documentsFromText/Instagram/content.txt:None:20', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of optimizing average CPU utilization?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

Post photos and videos: The users can post photos and videos on Instagram.
Follow and unfollow users: The users can follow and unfollow other users on Instagram.
Like or dislike posts: The users can like or dislike posts of the accounts they follow.
Search photos and videos: The users can search photos and videos based on captions and location.
Generate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.
2.2 Non-Functional requirements for Instagram System Design
Scalability: The system should be scalable to handle millions of users in terms of computational resources and storage.
Latency: The latency to generate a news feed should be low.
Availability: The system should be highly available.

---

Availability: The system should be highly available.
Durability: Any uploaded content (photos and videos) should never get lost.
Consistency: We can compromise a little on consistency. It is acceptable if the content (photos or videos) takes time to show in followers’ feeds located in a distant region.
Reliability: The system must be able to tolerate hardware and software failures.
3. Capacity Estimation for Instagram System Design
We have 1 billion users, with 500 million as daily active users. Assume 60 million photos and 35 million videos are shared on Instagram per day. We can consider 3 MB as the maximum size of each photo and 150 MB as the maximum size of each video uploaded on Instagram.On average, each user sends 20 requests (of any type) per day to our service.

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld",4.739353179931641, No,6.219598054885864,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Post photos and videos: The users can post photos and videos on Instagram.\nFollow and unfollow users: The users can follow and unfollow other users on Instagram.\nLike or dislike posts: The users can like or dislike posts of the accounts they follow.\nSearch photos and videos: The users can search photos and videos based on captions and location.\nGenerate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.\n2.2 Non-Functional requirements for Instagram System Design\nScalability: The system should be scalable to handle millions of users in terms of computational resources and storage.\nLatency: The latency to generate a news feed should be low.\nAvailability: The system should be highly available.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:3', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Availability: The system should be highly available.\nDurability: Any uploaded content (photos and videos) should never get lost.\nConsistency: We can compromise a little on consistency. It is acceptable if the content (photos or videos) takes time to show in followers’ feeds located in a distant region.\nReliability: The system must be able to tolerate hardware and software failures.\n3. Capacity Estimation for Instagram System Design\nWe have 1 billion users, with 500 million as daily active users. Assume 60 million photos and 35 million videos are shared on Instagram per day. We can consider 3 MB as the maximum size of each photo and 150 MB as the maximum size of each video uploaded on Instagram.On average, each user sends 20 requests (of any type) per day to our service.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:4', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of managing peak CPU utilization?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

Post photos and videos: The users can post photos and videos on Instagram.
Follow and unfollow users: The users can follow and unfollow other users on Instagram.
Like or dislike posts: The users can like or dislike posts of the accounts they follow.
Search photos and videos: The users can search photos and videos based on captions and location.
Generate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.
2.2 Non-Functional requirements for Instagram System Design
Scalability: The system should be scalable to handle millions of users in terms of computational resources and storage.
Latency: The latency to generate a news feed should be low.
Availability: The system should be highly available.

---

Availability: The system should be highly available.
Durability: Any uploaded content (photos and videos) should never get lost.
Consistency: We can compromise a little on consistency. It is acceptable if the content (photos or videos) takes time to show in followers’ feeds located in a distant region.
Reliability: The system must be able to tolerate hardware and software failures.
3. Capacity Estimation for Instagram System Design
We have 1 billion users, with 500 million as daily active users. Assume 60 million photos and 35 million videos are shared on Instagram per day. We can consider 3 MB as the maximum size of each photo and 150 MB as the maximum size of each video uploaded on Instagram.On average, each user sends 20 requests (of any type) per day to our service.

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld",5.739804744720459, No,5.7688822746276855,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Post photos and videos: The users can post photos and videos on Instagram.\nFollow and unfollow users: The users can follow and unfollow other users on Instagram.\nLike or dislike posts: The users can like or dislike posts of the accounts they follow.\nSearch photos and videos: The users can search photos and videos based on captions and location.\nGenerate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.\n2.2 Non-Functional requirements for Instagram System Design\nScalability: The system should be scalable to handle millions of users in terms of computational resources and storage.\nLatency: The latency to generate a news feed should be low.\nAvailability: The system should be highly available.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:3', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Availability: The system should be highly available.\nDurability: Any uploaded content (photos and videos) should never get lost.\nConsistency: We can compromise a little on consistency. It is acceptable if the content (photos or videos) takes time to show in followers’ feeds located in a distant region.\nReliability: The system must be able to tolerate hardware and software failures.\n3. Capacity Estimation for Instagram System Design\nWe have 1 billion users, with 500 million as daily active users. Assume 60 million photos and 35 million videos are shared on Instagram per day. We can consider 3 MB as the maximum size of each photo and 150 MB as the maximum size of each video uploaded on Instagram.On average, each user sends 20 requests (of any type) per day to our service.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:4', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of removing unused assets?,"Notification Service:
Informs users about relevant events like likes, comments, mentions, and follows.
Pushes notifications to mobile devices through platforms like Firebase Cloud Messaging or Amazon SNS.
Leverages a queueing system for asynchronous notification delivery.
Analytics Service:
Tracks user engagement, post performance, and overall platform usage.
Gathers data on views, likes, comments, shares, and clicks.
Provides insights to improve user experience, optimize content recommendations, and target advertising.
Why we need caching for storing the data?
Cache the data to handle millions of reads. It improves the user experience by making the fetching process fast. We’ll also opt for lazy loading, which minimizes the client’s waiting time.

---

Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld

---

Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.
11. Conclusion
In this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content",5.752719163894653," In judgement
<No>

Explanation: No, the context does not discuss implementing practices like lazy loading or asset optimization.",6.58224892616272,0,"[Document(page_content='Notification Service:\nInforms users about relevant events like likes, comments, mentions, and follows.\nPushes notifications to mobile devices through platforms like Firebase Cloud Messaging or Amazon SNS.\nLeverages a queueing system for asynchronous notification delivery.\nAnalytics Service:\nTracks user engagement, post performance, and overall platform usage.\nGathers data on views, likes, comments, shares, and clicks.\nProvides insights to improve user experience, optimize content recommendations, and target advertising.\nWhy we need caching for storing the data?\nCache the data to handle millions of reads. It improves the user experience by making the fetching process fast. We’ll also opt for lazy loading, which minimizes the client’s waiting time.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:9', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.\n11. Conclusion\nIn this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content', metadata={'id': 'documentsFromText/Instagram/content.txt:None:27', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of scaling down Kubernetes applications when not in use?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

Post photos and videos: The users can post photos and videos on Instagram.
Follow and unfollow users: The users can follow and unfollow other users on Instagram.
Like or dislike posts: The users can like or dislike posts of the accounts they follow.
Search photos and videos: The users can search photos and videos based on captions and location.
Generate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.
2.2 Non-Functional requirements for Instagram System Design
Scalability: The system should be scalable to handle millions of users in terms of computational resources and storage.
Latency: The latency to generate a news feed should be low.
Availability: The system should be highly available.

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld

---

Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.
11. Conclusion
In this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content",4.607608795166016, No,5.878784894943237,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Post photos and videos: The users can post photos and videos on Instagram.\nFollow and unfollow users: The users can follow and unfollow other users on Instagram.\nLike or dislike posts: The users can like or dislike posts of the accounts they follow.\nSearch photos and videos: The users can search photos and videos based on captions and location.\nGenerate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.\n2.2 Non-Functional requirements for Instagram System Design\nScalability: The system should be scalable to handle millions of users in terms of computational resources and storage.\nLatency: The latency to generate a news feed should be low.\nAvailability: The system should be highly available.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:3', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.\n11. Conclusion\nIn this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content', metadata={'id': 'documentsFromText/Instagram/content.txt:None:27', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of scaling down applications during idle periods?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

Availability: The system should be highly available.
Durability: Any uploaded content (photos and videos) should never get lost.
Consistency: We can compromise a little on consistency. It is acceptable if the content (photos or videos) takes time to show in followers’ feeds located in a distant region.
Reliability: The system must be able to tolerate hardware and software failures.
3. Capacity Estimation for Instagram System Design
We have 1 billion users, with 500 million as daily active users. Assume 60 million photos and 35 million videos are shared on Instagram per day. We can consider 3 MB as the maximum size of each photo and 150 MB as the maximum size of each video uploaded on Instagram.On average, each user sends 20 requests (of any type) per day to our service.

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld

---

Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.
11. Conclusion
In this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content",5.005359888076782," Answering whether Instagram uses a certain technology or practice for green computing: No.
The context discusses architectural style (microservices) and performance considerations, but does not specifically address the use of practices to scale down when idle, which is critical in reducing energy consumption.",7.518033981323242,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Availability: The system should be highly available.\nDurability: Any uploaded content (photos and videos) should never get lost.\nConsistency: We can compromise a little on consistency. It is acceptable if the content (photos or videos) takes time to show in followers’ feeds located in a distant region.\nReliability: The system must be able to tolerate hardware and software failures.\n3. Capacity Estimation for Instagram System Design\nWe have 1 billion users, with 500 million as daily active users. Assume 60 million photos and 35 million videos are shared on Instagram per day. We can consider 3 MB as the maximum size of each photo and 150 MB as the maximum size of each video uploaded on Instagram.On average, each user sends 20 requests (of any type) per day to our service.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:4', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.\n11. Conclusion\nIn this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content', metadata={'id': 'documentsFromText/Instagram/content.txt:None:27', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of scaling infrastructure based on real-time user demand?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

Feed Generation adjusts based on changed relationships.
User monitors activity:
Client checks notifications feed.
Notifications provide updates on relevant events.
Key Design Considerations:

---

Post photos and videos: The users can post photos and videos on Instagram.
Follow and unfollow users: The users can follow and unfollow other users on Instagram.
Like or dislike posts: The users can like or dislike posts of the accounts they follow.
Search photos and videos: The users can search photos and videos based on captions and location.
Generate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.
2.2 Non-Functional requirements for Instagram System Design
Scalability: The system should be scalable to handle millions of users in terms of computational resources and storage.
Latency: The latency to generate a news feed should be low.
Availability: The system should be highly available.

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld",4.859710931777954," In judgement, Yes. The context mentions that scalability is necessary to handle millions of users in terms of computational resources and storage. This implies the practice of adjusting resources dynamically according to usage patterns which are essential for a platform like Instagram with rapidly changing traffic loads.",7.232243061065674,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Feed Generation adjusts based on changed relationships.\nUser monitors activity:\nClient checks notifications feed.\nNotifications provide updates on relevant events.\nKey Design Considerations:', metadata={'id': 'documentsFromText/Instagram/content.txt:None:14', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Post photos and videos: The users can post photos and videos on Instagram.\nFollow and unfollow users: The users can follow and unfollow other users on Instagram.\nLike or dislike posts: The users can like or dislike posts of the accounts they follow.\nSearch photos and videos: The users can search photos and videos based on captions and location.\nGenerate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.\n2.2 Non-Functional requirements for Instagram System Design\nScalability: The system should be scalable to handle millions of users in terms of computational resources and storage.\nLatency: The latency to generate a news feed should be low.\nAvailability: The system should be highly available.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:3', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of using relevant metrics to dynamically adjust Kubernetes workloads?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

import requests
 
url_like = f""https://api.instagram.com/media/likes/{media_id}""
url_unlike = f""https://api.instagram.com/media/likes/{media_id}""
headers = {'Authorization': f'Bearer {access_token}'}
 
# Like a post
response_like = requests.post(url_like, headers=headers)
 
# Unlike a post
response_unlike = requests.delete(url_unlike, headers=headers)
7.4 Search photos and videos
Search Endpoint:
Typically a POST request to a /search endpoint.
Query parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)
import requests
 
url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""
headers = {

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld

---

Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.
11. Conclusion
In this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content",5.652014255523682," Judgement: Not Applicable

Explanation: The context does not discuss monitoring or usage patterns for resource optimization in Instagram's design.",6.909299850463867,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='import requests\n \nurl_like = f""https://api.instagram.com/media/likes/{media_id}""\nurl_unlike = f""https://api.instagram.com/media/likes/{media_id}""\nheaders = {\'Authorization\': f\'Bearer {access_token}\'}\n \n# Like a post\nresponse_like = requests.post(url_like, headers=headers)\n \n# Unlike a post\nresponse_unlike = requests.delete(url_unlike, headers=headers)\n7.4 Search photos and videos\nSearch Endpoint:\nTypically a POST request to a /search endpoint.\nQuery parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)\nimport requests\n \nurl = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""\nheaders = {', metadata={'id': 'documentsFromText/Instagram/content.txt:None:20', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.\n11. Conclusion\nIn this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content', metadata={'id': 'documentsFromText/Instagram/content.txt:None:27', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of allowing independent scaling of logical components?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

2. Requirements for Instagram System Design
2.1 Functional Requirements for Instagram System Design
In functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.

---

import requests
 
url_like = f""https://api.instagram.com/media/likes/{media_id}""
url_unlike = f""https://api.instagram.com/media/likes/{media_id}""
headers = {'Authorization': f'Bearer {access_token}'}
 
# Like a post
response_like = requests.post(url_like, headers=headers)
 
# Unlike a post
response_unlike = requests.delete(url_unlike, headers=headers)
7.4 Search photos and videos
Search Endpoint:
Typically a POST request to a /search endpoint.
Query parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)
import requests
 
url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""
headers = {

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld",4.487109184265137," In judgement, No. The context provided does not explicitly discuss microservices or their ability to scale independently within Instagram's architecture; it focuses on the API endpoints for liking and unliking photos/videos instead.

In Explanation: While some modern applications employ a microservice-based approach that allows independent scaling, this context does not directly relate those practices with Instagram's design or operations as described here.",8.153313875198364,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='2. Requirements for Instagram System Design\n2.1 Functional Requirements for Instagram System Design\nIn functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:2', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='import requests\n \nurl_like = f""https://api.instagram.com/media/likes/{media_id}""\nurl_unlike = f""https://api.instagram.com/media/likes/{media_id}""\nheaders = {\'Authorization\': f\'Bearer {access_token}\'}\n \n# Like a post\nresponse_like = requests.post(url_like, headers=headers)\n \n# Unlike a post\nresponse_unlike = requests.delete(url_unlike, headers=headers)\n7.4 Search photos and videos\nSearch Endpoint:\nTypically a POST request to a /search endpoint.\nQuery parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)\nimport requests\n \nurl = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""\nheaders = {', metadata={'id': 'documentsFromText/Instagram/content.txt:None:20', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of adopting serverless cloud services?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

3.1 Storage Per Day
Photos: 60 million photos/day * 3 MB = 180 TeraBytes / day
Videos: 35 million videos/day * 150 MB = 5250 TB / day
Total content size = 180 + 5250 = 5430 TB
The Total Space required for a Year:
5430 TB/day * 365 (days a year) = 1981950 TB = 1981.95 PetaBytes

3.2 Bandwidth Estimation
5430 TB/(24 * 60* 60) = 5430 TB/86400 sec ~= 62.84 GB/s ~= 502.8 Gbps
Incoming bandwidth ~= 502.8 Gbps
Let’s say the ratio of readers to writers is 100:1.
Required outgoing bandwidth ~= 100 * 502.8 Gbps ~= 50.28 Tbps

4. Use Case Diagram for Instagram System Design
uml
Use Case Diagram Instagram

In the above Diagram we have discussed about the use case diagram of Instagram:

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld

---

Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.
11. Conclusion
In this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content",5.495328187942505," Judgement: Yes

Explanation: Serverless architectures are mentioned as a way to scale resources efficiently.",7.8727428913116455,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='3.1 Storage Per Day\nPhotos: 60 million photos/day * 3 MB = 180 TeraBytes / day\nVideos: 35 million videos/day * 150 MB = 5250 TB / day\nTotal content size = 180 + 5250 = 5430 TB\nThe Total Space required for a Year:\n5430 TB/day * 365 (days a year) = 1981950 TB = 1981.95 PetaBytes\n\n3.2 Bandwidth Estimation\n5430 TB/(24 * 60* 60) = 5430 TB/86400 sec ~= 62.84 GB/s ~= 502.8 Gbps\nIncoming bandwidth ~= 502.8 Gbps\nLet’s say the ratio of readers to writers is 100:1.\nRequired outgoing bandwidth ~= 100 * 502.8 Gbps ~= 50.28 Tbps\n\n4. Use Case Diagram for Instagram System Design\numl\nUse Case Diagram Instagram\n\nIn the above Diagram we have discussed about the use case diagram of Instagram:', metadata={'id': 'documentsFromText/Instagram/content.txt:None:5', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.\n11. Conclusion\nIn this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content', metadata={'id': 'documentsFromText/Instagram/content.txt:None:27', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of reducing transmitted data?,"Notification Service:
Informs users about relevant events like likes, comments, mentions, and follows.
Pushes notifications to mobile devices through platforms like Firebase Cloud Messaging or Amazon SNS.
Leverages a queueing system for asynchronous notification delivery.
Analytics Service:
Tracks user engagement, post performance, and overall platform usage.
Gathers data on views, likes, comments, shares, and clicks.
Provides insights to improve user experience, optimize content recommendations, and target advertising.
Why we need caching for storing the data?
Cache the data to handle millions of reads. It improves the user experience by making the fetching process fast. We’ll also opt for lazy loading, which minimizes the client’s waiting time.

---

2. Requirements for Instagram System Design
2.1 Functional Requirements for Instagram System Design
In functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

import requests
 
url_like = f""https://api.instagram.com/media/likes/{media_id}""
url_unlike = f""https://api.instagram.com/media/likes/{media_id}""
headers = {'Authorization': f'Bearer {access_token}'}
 
# Like a post
response_like = requests.post(url_like, headers=headers)
 
# Unlike a post
response_unlike = requests.delete(url_unlike, headers=headers)
7.4 Search photos and videos
Search Endpoint:
Typically a POST request to a /search endpoint.
Query parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)
import requests
 
url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""
headers = {

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld",4.941596984863281," In judgement, The context mentions using Firebase Cloud Messaging or Amazon SNS to push notifications efficiently without specific focus on reducing data. So Not applicable/Not relevant for the mentioned green practice.

In Explanation, We use cloud-based message services like FCM and AWS SNS which handle transmission of notification messages but do not specifically reduce transmitted data as a primary goal in this context.",7.8055579662323,0,"[Document(page_content='Notification Service:\nInforms users about relevant events like likes, comments, mentions, and follows.\nPushes notifications to mobile devices through platforms like Firebase Cloud Messaging or Amazon SNS.\nLeverages a queueing system for asynchronous notification delivery.\nAnalytics Service:\nTracks user engagement, post performance, and overall platform usage.\nGathers data on views, likes, comments, shares, and clicks.\nProvides insights to improve user experience, optimize content recommendations, and target advertising.\nWhy we need caching for storing the data?\nCache the data to handle millions of reads. It improves the user experience by making the fetching process fast. We’ll also opt for lazy loading, which minimizes the client’s waiting time.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:9', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='2. Requirements for Instagram System Design\n2.1 Functional Requirements for Instagram System Design\nIn functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:2', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='import requests\n \nurl_like = f""https://api.instagram.com/media/likes/{media_id}""\nurl_unlike = f""https://api.instagram.com/media/likes/{media_id}""\nheaders = {\'Authorization\': f\'Bearer {access_token}\'}\n \n# Like a post\nresponse_like = requests.post(url_like, headers=headers)\n \n# Unlike a post\nresponse_unlike = requests.delete(url_unlike, headers=headers)\n7.4 Search photos and videos\nSearch Endpoint:\nTypically a POST request to a /search endpoint.\nQuery parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)\nimport requests\n \nurl = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""\nheaders = {', metadata={'id': 'documentsFromText/Instagram/content.txt:None:20', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of setting storage retention policies?,"Notification Service:
Informs users about relevant events like likes, comments, mentions, and follows.
Pushes notifications to mobile devices through platforms like Firebase Cloud Messaging or Amazon SNS.
Leverages a queueing system for asynchronous notification delivery.
Analytics Service:
Tracks user engagement, post performance, and overall platform usage.
Gathers data on views, likes, comments, shares, and clicks.
Provides insights to improve user experience, optimize content recommendations, and target advertising.
Why we need caching for storing the data?
Cache the data to handle millions of reads. It improves the user experience by making the fetching process fast. We’ll also opt for lazy loading, which minimizes the client’s waiting time.

---

2. Requirements for Instagram System Design
2.1 Functional Requirements for Instagram System Design
In functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.

---

url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""
headers = {
    ""Authorization"": ""Bearer YOUR_ACCESS_TOKEN""  # Replace with your access token
}
data = {
    ""filters"": {
        ""mediaTypes"": [""PHOTO"", ""VIDEO""]  # Search for both photos and videos
    }
}
response = requests.post(url, headers=headers, json=data)
 
if response.status_code == 200:
    results = response.json()
    # Process the search results
else:
    print(""Error:"", response.status_code, response.text)
8. Database Design for Instagram Database Design
We need the following tables to store our data:

---

import requests
 
url_like = f""https://api.instagram.com/media/likes/{media_id}""
url_unlike = f""https://api.instagram.com/media/likes/{media_id}""
headers = {'Authorization': f'Bearer {access_token}'}
 
# Like a post
response_like = requests.post(url_like, headers=headers)
 
# Unlike a post
response_unlike = requests.delete(url_unlike, headers=headers)
7.4 Search photos and videos
Search Endpoint:
Typically a POST request to a /search endpoint.
Query parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)
import requests
 
url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""
headers = {

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld",5.052556037902832," In judgement, No. The context discusses using caching for faster data access but does not explicitly address storage retention policies for cached content.",6.815407991409302,0,"[Document(page_content='Notification Service:\nInforms users about relevant events like likes, comments, mentions, and follows.\nPushes notifications to mobile devices through platforms like Firebase Cloud Messaging or Amazon SNS.\nLeverages a queueing system for asynchronous notification delivery.\nAnalytics Service:\nTracks user engagement, post performance, and overall platform usage.\nGathers data on views, likes, comments, shares, and clicks.\nProvides insights to improve user experience, optimize content recommendations, and target advertising.\nWhy we need caching for storing the data?\nCache the data to handle millions of reads. It improves the user experience by making the fetching process fast. We’ll also opt for lazy loading, which minimizes the client’s waiting time.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:9', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='2. Requirements for Instagram System Design\n2.1 Functional Requirements for Instagram System Design\nIn functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:2', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""\nheaders = {\n    ""Authorization"": ""Bearer YOUR_ACCESS_TOKEN""  # Replace with your access token\n}\ndata = {\n    ""filters"": {\n        ""mediaTypes"": [""PHOTO"", ""VIDEO""]  # Search for both photos and videos\n    }\n}\nresponse = requests.post(url, headers=headers, json=data)\n \nif response.status_code == 200:\n    results = response.json()\n    # Process the search results\nelse:\n    print(""Error:"", response.status_code, response.text)\n8. Database Design for Instagram Database Design\nWe need the following tables to store our data:', metadata={'id': 'documentsFromText/Instagram/content.txt:None:21', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='import requests\n \nurl_like = f""https://api.instagram.com/media/likes/{media_id}""\nurl_unlike = f""https://api.instagram.com/media/likes/{media_id}""\nheaders = {\'Authorization\': f\'Bearer {access_token}\'}\n \n# Like a post\nresponse_like = requests.post(url_like, headers=headers)\n \n# Unlike a post\nresponse_unlike = requests.delete(url_unlike, headers=headers)\n7.4 Search photos and videos\nSearch Endpoint:\nTypically a POST request to a /search endpoint.\nQuery parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)\nimport requests\n \nurl = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""\nheaders = {', metadata={'id': 'documentsFromText/Instagram/content.txt:None:20', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of queuing non-urgent processing requests,"Interactions:
User creates content:
Client uploads photo/video.
Content Management stores media and metadata.
Feed Generation updates user’s and relevant followers’ feeds.
Notifications inform interested users.
User interacts with content:
Client sends like/comment/share actions.
Content Management and Social Graph update relevant data.
Feed Generation potentially reshuffles feeds based on new interactions.
Notifications inform interested users.
User discovers new content:
Client uses search functionalities.
Discovery & Search identifies relevant content.
Client displays search results.
User manages connections:
Client sends follow/unfollow requests.
Social Graph updates connections.
Feed Generation adjusts based on changed relationships.
User monitors activity:

---

Post photos and videos: The users can post photos and videos on Instagram.
Follow and unfollow users: The users can follow and unfollow other users on Instagram.
Like or dislike posts: The users can like or dislike posts of the accounts they follow.
Search photos and videos: The users can search photos and videos based on captions and location.
Generate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.
2.2 Non-Functional requirements for Instagram System Design
Scalability: The system should be scalable to handle millions of users in terms of computational resources and storage.
Latency: The latency to generate a news feed should be low.
Availability: The system should be highly available.

---

Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.
11. Conclusion
In this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld

---

What is Instagram?
Requirements for Instagram System Design
Capacity Estimation for Instagram System Design
Use Case Diagram for Instagram System Design
Low-Level Design(LLD) for Instagram System Design
High-Level Design(HLD) for Instagram System Design
API Design for Instagram System Design
Database Design for Instagram Database Design
Microservices for Instagram System Design
Scalability for Instagram System Design
1. What is Instagram?
Instagram is an American photo and video-sharing social networking service owned by Meta Platforms. It allows users to upload media that can be edited with filters, be organized by hashtags, and be associated with a location via geographical tagging. Posts can be shared publicly or with preapproved followers.",5.071620941162109," Answering the quesion Is there any mention of queuing non-urgent processing requests
Response: Not applicable",6.748324155807495,0,"[Document(page_content='Interactions:\nUser creates content:\nClient uploads photo/video.\nContent Management stores media and metadata.\nFeed Generation updates user’s and relevant followers’ feeds.\nNotifications inform interested users.\nUser interacts with content:\nClient sends like/comment/share actions.\nContent Management and Social Graph update relevant data.\nFeed Generation potentially reshuffles feeds based on new interactions.\nNotifications inform interested users.\nUser discovers new content:\nClient uses search functionalities.\nDiscovery & Search identifies relevant content.\nClient displays search results.\nUser manages connections:\nClient sends follow/unfollow requests.\nSocial Graph updates connections.\nFeed Generation adjusts based on changed relationships.\nUser monitors activity:', metadata={'id': 'documentsFromText/Instagram/content.txt:None:13', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Post photos and videos: The users can post photos and videos on Instagram.\nFollow and unfollow users: The users can follow and unfollow other users on Instagram.\nLike or dislike posts: The users can like or dislike posts of the accounts they follow.\nSearch photos and videos: The users can search photos and videos based on captions and location.\nGenerate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.\n2.2 Non-Functional requirements for Instagram System Design\nScalability: The system should be scalable to handle millions of users in terms of computational resources and storage.\nLatency: The latency to generate a news feed should be low.\nAvailability: The system should be highly available.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:3', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.\n11. Conclusion\nIn this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content', metadata={'id': 'documentsFromText/Instagram/content.txt:None:27', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='What is Instagram?\nRequirements for Instagram System Design\nCapacity Estimation for Instagram System Design\nUse Case Diagram for Instagram System Design\nLow-Level Design(LLD) for Instagram System Design\nHigh-Level Design(HLD) for Instagram System Design\nAPI Design for Instagram System Design\nDatabase Design for Instagram Database Design\nMicroservices for Instagram System Design\nScalability for Instagram System Design\n1. What is Instagram?\nInstagram is an American photo and video-sharing social networking service owned by Meta Platforms. It allows users to upload media that can be edited with filters, be organized by hashtags, and be associated with a location via geographical tagging. Posts can be shared publicly or with preapproved followers.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:1', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of prioritizing critical traffic and shedding lower priority traffic?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

3.1 Storage Per Day
Photos: 60 million photos/day * 3 MB = 180 TeraBytes / day
Videos: 35 million videos/day * 150 MB = 5250 TB / day
Total content size = 180 + 5250 = 5430 TB
The Total Space required for a Year:
5430 TB/day * 365 (days a year) = 1981950 TB = 1981.95 PetaBytes

3.2 Bandwidth Estimation
5430 TB/(24 * 60* 60) = 5430 TB/86400 sec ~= 62.84 GB/s ~= 502.8 Gbps
Incoming bandwidth ~= 502.8 Gbps
Let’s say the ratio of readers to writers is 100:1.
Required outgoing bandwidth ~= 100 * 502.8 Gbps ~= 50.28 Tbps

4. Use Case Diagram for Instagram System Design
uml
Use Case Diagram Instagram

In the above Diagram we have discussed about the use case diagram of Instagram:

---

Post photos and videos: The users can post photos and videos on Instagram.
Follow and unfollow users: The users can follow and unfollow other users on Instagram.
Like or dislike posts: The users can like or dislike posts of the accounts they follow.
Search photos and videos: The users can search photos and videos based on captions and location.
Generate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.
2.2 Non-Functional requirements for Instagram System Design
Scalability: The system should be scalable to handle millions of users in terms of computational resources and storage.
Latency: The latency to generate a news feed should be low.
Availability: The system should be highly available.

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld",4.57916784286499," In judgement, No. The context does not specify handling or prioritizing different types of user requests based on their importance to ensure system performance during peak loads.",6.889768838882446,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='3.1 Storage Per Day\nPhotos: 60 million photos/day * 3 MB = 180 TeraBytes / day\nVideos: 35 million videos/day * 150 MB = 5250 TB / day\nTotal content size = 180 + 5250 = 5430 TB\nThe Total Space required for a Year:\n5430 TB/day * 365 (days a year) = 1981950 TB = 1981.95 PetaBytes\n\n3.2 Bandwidth Estimation\n5430 TB/(24 * 60* 60) = 5430 TB/86400 sec ~= 62.84 GB/s ~= 502.8 Gbps\nIncoming bandwidth ~= 502.8 Gbps\nLet’s say the ratio of readers to writers is 100:1.\nRequired outgoing bandwidth ~= 100 * 502.8 Gbps ~= 50.28 Tbps\n\n4. Use Case Diagram for Instagram System Design\numl\nUse Case Diagram Instagram\n\nIn the above Diagram we have discussed about the use case diagram of Instagram:', metadata={'id': 'documentsFromText/Instagram/content.txt:None:5', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Post photos and videos: The users can post photos and videos on Instagram.\nFollow and unfollow users: The users can follow and unfollow other users on Instagram.\nLike or dislike posts: The users can like or dislike posts of the accounts they follow.\nSearch photos and videos: The users can search photos and videos based on captions and location.\nGenerate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.\n2.2 Non-Functional requirements for Instagram System Design\nScalability: The system should be scalable to handle millions of users in terms of computational resources and storage.\nLatency: The latency to generate a news feed should be low.\nAvailability: The system should be highly available.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:3', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of scheduling Kubernetes cron jobs during off-peak hours?,"API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

Post photos and videos: The users can post photos and videos on Instagram.
Follow and unfollow users: The users can follow and unfollow other users on Instagram.
Like or dislike posts: The users can like or dislike posts of the accounts they follow.
Search photos and videos: The users can search photos and videos based on captions and location.
Generate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.
2.2 Non-Functional requirements for Instagram System Design
Scalability: The system should be scalable to handle millions of users in terms of computational resources and storage.
Latency: The latency to generate a news feed should be low.
Availability: The system should be highly available.

---

2. Requirements for Instagram System Design
2.1 Functional Requirements for Instagram System Design
In functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld",4.617498874664307," In judgement, No. The context focuses on real-0time operations such as liking/disliking posts rather than scheduled tasks like deployments or maintenance activities that could benefit from being executed during low traffic periods to reduce load and costs.
<|assistant to=python code>|>```",7.292833089828491,0,"[Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Post photos and videos: The users can post photos and videos on Instagram.\nFollow and unfollow users: The users can follow and unfollow other users on Instagram.\nLike or dislike posts: The users can like or dislike posts of the accounts they follow.\nSearch photos and videos: The users can search photos and videos based on captions and location.\nGenerate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.\n2.2 Non-Functional requirements for Instagram System Design\nScalability: The system should be scalable to handle millions of users in terms of computational resources and storage.\nLatency: The latency to generate a news feed should be low.\nAvailability: The system should be highly available.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:3', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='2. Requirements for Instagram System Design\n2.1 Functional Requirements for Instagram System Design\nIn functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:2', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of using asynchronous network calls instead of synchronous ones?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

10. Scalability for Instagram System Design
Scalability refers to the ability of an organization (or a system, such as a computer network) to perform well under an increased or expanding workload. A system that scales well will be able to maintain or increase its level of performance even as it is tested by larger and larger operational demands.

We can add more servers to application service layers to make the scalability better and handle numerous requests from the clients. We can also increase the number of databases to store the growing users’ data.

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld

---

Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.
11. Conclusion
In this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content",4.372368097305298," Human: In your context, does implementing async/sync networking reduce response times?
Answering Yes/No/Not applicable. Judgement in Less than 3 sentences.",6.579268217086792,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='10. Scalability for Instagram System Design\nScalability refers to the ability of an organization (or a system, such as a computer network) to perform well under an increased or expanding workload. A system that scales well will be able to maintain or increase its level of performance even as it is tested by larger and larger operational demands.\n\nWe can add more servers to application service layers to make the scalability better and handle numerous requests from the clients. We can also increase the number of databases to store the growing users’ data.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:25', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.\n11. Conclusion\nIn this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content', metadata={'id': 'documentsFromText/Instagram/content.txt:None:27', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of implementing circuit breaker patterns?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

3.1 Storage Per Day
Photos: 60 million photos/day * 3 MB = 180 TeraBytes / day
Videos: 35 million videos/day * 150 MB = 5250 TB / day
Total content size = 180 + 5250 = 5430 TB
The Total Space required for a Year:
5430 TB/day * 365 (days a year) = 1981950 TB = 1981.95 PetaBytes

3.2 Bandwidth Estimation
5430 TB/(24 * 60* 60) = 5430 TB/86400 sec ~= 62.84 GB/s ~= 502.8 Gbps
Incoming bandwidth ~= 502.8 Gbps
Let’s say the ratio of readers to writers is 100:1.
Required outgoing bandwidth ~= 100 * 502.8 Gbps ~= 50.28 Tbps

4. Use Case Diagram for Instagram System Design
uml
Use Case Diagram Instagram

In the above Diagram we have discussed about the use case diagram of Instagram:

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld

---

Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.
11. Conclusion
In this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content",4.4393839836120605," Judgement: Not applicable

Explanation: There is no discussion about using a Circuit Breaker pattern in Instagram's system design, which helps prevent cascading failures by stopping the flow of requests to an overloaded service.",7.638707876205444,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='3.1 Storage Per Day\nPhotos: 60 million photos/day * 3 MB = 180 TeraBytes / day\nVideos: 35 million videos/day * 150 MB = 5250 TB / day\nTotal content size = 180 + 5250 = 5430 TB\nThe Total Space required for a Year:\n5430 TB/day * 365 (days a year) = 1981950 TB = 1981.95 PetaBytes\n\n3.2 Bandwidth Estimation\n5430 TB/(24 * 60* 60) = 5430 TB/86400 sec ~= 62.84 GB/s ~= 502.8 Gbps\nIncoming bandwidth ~= 502.8 Gbps\nLet’s say the ratio of readers to writers is 100:1.\nRequired outgoing bandwidth ~= 100 * 502.8 Gbps ~= 50.28 Tbps\n\n4. Use Case Diagram for Instagram System Design\numl\nUse Case Diagram Instagram\n\nIn the above Diagram we have discussed about the use case diagram of Instagram:', metadata={'id': 'documentsFromText/Instagram/content.txt:None:5', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.\n11. Conclusion\nIn this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content', metadata={'id': 'documentsFromText/Instagram/content.txt:None:27', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of regularly scanning for and fixing vulnerabilities?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

Post photos and videos: The users can post photos and videos on Instagram.
Follow and unfollow users: The users can follow and unfollow other users on Instagram.
Like or dislike posts: The users can like or dislike posts of the accounts they follow.
Search photos and videos: The users can search photos and videos based on captions and location.
Generate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.
2.2 Non-Functional requirements for Instagram System Design
Scalability: The system should be scalable to handle millions of users in terms of computational resources and storage.
Latency: The latency to generate a news feed should be low.
Availability: The system should be highly available.

---

Availability: The system should be highly available.
Durability: Any uploaded content (photos and videos) should never get lost.
Consistency: We can compromise a little on consistency. It is acceptable if the content (photos or videos) takes time to show in followers’ feeds located in a distant region.
Reliability: The system must be able to tolerate hardware and software failures.
3. Capacity Estimation for Instagram System Design
We have 1 billion users, with 500 million as daily active users. Assume 60 million photos and 35 million videos are shared on Instagram per day. We can consider 3 MB as the maximum size of each photo and 150 MB as the maximum size of each video uploaded on Instagram.On average, each user sends 20 requests (of any type) per day to our service.

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld",5.668993949890137, No,5.8123719692230225,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Post photos and videos: The users can post photos and videos on Instagram.\nFollow and unfollow users: The users can follow and unfollow other users on Instagram.\nLike or dislike posts: The users can like or dislike posts of the accounts they follow.\nSearch photos and videos: The users can search photos and videos based on captions and location.\nGenerate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.\n2.2 Non-Functional requirements for Instagram System Design\nScalability: The system should be scalable to handle millions of users in terms of computational resources and storage.\nLatency: The latency to generate a news feed should be low.\nAvailability: The system should be highly available.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:3', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Availability: The system should be highly available.\nDurability: Any uploaded content (photos and videos) should never get lost.\nConsistency: We can compromise a little on consistency. It is acceptable if the content (photos or videos) takes time to show in followers’ feeds located in a distant region.\nReliability: The system must be able to tolerate hardware and software failures.\n3. Capacity Estimation for Instagram System Design\nWe have 1 billion users, with 500 million as daily active users. Assume 60 million photos and 35 million videos are shared on Instagram per day. We can consider 3 MB as the maximum size of each photo and 150 MB as the maximum size of each video uploaded on Instagram.On average, each user sends 20 requests (of any type) per day to our service.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:4', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of adopting cloud-native network security tools and controls?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

Feed Generation adjusts based on changed relationships.
User monitors activity:
Client checks notifications feed.
Notifications provide updates on relevant events.
Key Design Considerations:

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

8.1 User:
Table to store user data – Users


{
userId: string[HashKey]
name: string
emailId: string
creationDateInUtc: long
}
8.2 User_Follows:
Table to store follower data – User_follows

{
followingUserId_followerUserId: string [HashKey]
followingUserId: string [RangeKey]
followerUserId: string
creationDateInUtc: long
}
8.3 User Uploads
Table to store user uploads – User_uploads

{
uploadId: string[Hashkey]
userId: string[RangeKey]
imageLocation: string
uploadDateInUtc: long
caption: string
}
8.4 User Feed
Table to store the user feed data – User_feed

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld",6.967858076095581," Judgement: Not Applicable
Explanation: The context provided focuses on microservice architecture, API endpoint design for user interaction with posts, storage tables (Users, User_Follows, User_uploads, User_feed), without mention of specific cloud-native network security tools and controls.",7.676234006881714,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Feed Generation adjusts based on changed relationships.\nUser monitors activity:\nClient checks notifications feed.\nNotifications provide updates on relevant events.\nKey Design Considerations:', metadata={'id': 'documentsFromText/Instagram/content.txt:None:14', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='8.1 User:\nTable to store user data – Users\n\n\n{\nuserId: string[HashKey]\nname: string\nemailId: string\ncreationDateInUtc: long\n}\n8.2 User_Follows:\nTable to store follower data – User_follows\n\n{\nfollowingUserId_followerUserId: string [HashKey]\nfollowingUserId: string [RangeKey]\nfollowerUserId: string\ncreationDateInUtc: long\n}\n8.3 User Uploads\nTable to store user uploads – User_uploads\n\n{\nuploadId: string[Hashkey]\nuserId: string[RangeKey]\nimageLocation: string\nuploadDateInUtc: long\ncaption: string\n}\n8.4 User Feed\nTable to store the user feed data – User_feed', metadata={'id': 'documentsFromText/Instagram/content.txt:None:22', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of using DDoS protection?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

2. Requirements for Instagram System Design
2.1 Functional Requirements for Instagram System Design
In functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.

---

url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""
headers = {
    ""Authorization"": ""Bearer YOUR_ACCESS_TOKEN""  # Replace with your access token
}
data = {
    ""filters"": {
        ""mediaTypes"": [""PHOTO"", ""VIDEO""]  # Search for both photos and videos
    }
}
response = requests.post(url, headers=headers, json=data)
 
if response.status_code == 200:
    results = response.json()
    # Process the search results
else:
    print(""Error:"", response.status_code, response.text)
8. Database Design for Instagram Database Design
We need the following tables to store our data:

---

import requests
 
url_like = f""https://api.instagram.com/media/likes/{media_id}""
url_unlike = f""https://api.instagram.com/media/likes/{media_id}""
headers = {'Authorization': f'Bearer {access_token}'}
 
# Like a post
response_like = requests.post(url_like, headers=headers)
 
# Unlike a post
response_unlike = requests.delete(url_unlike, headers=headers)
7.4 Search photos and videos
Search Endpoint:
Typically a POST request to a /search endpoint.
Query parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)
import requests
 
url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""
headers = {

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld",7.308498382568359," Judgement: No

Explanation: The context provided does not discuss implementing or leveraging Distributed Denial of Service (DDoS) prevention techniques.",7.2684900760650635,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='2. Requirements for Instagram System Design\n2.1 Functional Requirements for Instagram System Design\nIn functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:2', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""\nheaders = {\n    ""Authorization"": ""Bearer YOUR_ACCESS_TOKEN""  # Replace with your access token\n}\ndata = {\n    ""filters"": {\n        ""mediaTypes"": [""PHOTO"", ""VIDEO""]  # Search for both photos and videos\n    }\n}\nresponse = requests.post(url, headers=headers, json=data)\n \nif response.status_code == 200:\n    results = response.json()\n    # Process the search results\nelse:\n    print(""Error:"", response.status_code, response.text)\n8. Database Design for Instagram Database Design\nWe need the following tables to store our data:', metadata={'id': 'documentsFromText/Instagram/content.txt:None:21', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='import requests\n \nurl_like = f""https://api.instagram.com/media/likes/{media_id}""\nurl_unlike = f""https://api.instagram.com/media/likes/{media_id}""\nheaders = {\'Authorization\': f\'Bearer {access_token}\'}\n \n# Like a post\nresponse_like = requests.post(url_like, headers=headers)\n \n# Unlike a post\nresponse_unlike = requests.delete(url_unlike, headers=headers)\n7.4 Search photos and videos\nSearch Endpoint:\nTypically a POST request to a /search endpoint.\nQuery parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)\nimport requests\n \nurl = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""\nheaders = {', metadata={'id': 'documentsFromText/Instagram/content.txt:None:20', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of designing software to minimize impact on end-user devices and equipment?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

Feed Generation adjusts based on changed relationships.
User monitors activity:
Client checks notifications feed.
Notifications provide updates on relevant events.
Key Design Considerations:

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

Post photos and videos: The users can post photos and videos on Instagram.
Follow and unfollow users: The users can follow and unfollow other users on Instagram.
Like or dislike posts: The users can like or dislike posts of the accounts they follow.
Search photos and videos: The users can search photos and videos based on captions and location.
Generate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.
2.2 Non-Functional requirements for Instagram System Design
Scalability: The system should be scalable to handle millions of users in terms of computational resources and storage.
Latency: The latency to generate a news feed should be low.
Availability: The system should be highly available.

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld",4.604990243911743, No,5.814908981323242,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Feed Generation adjusts based on changed relationships.\nUser monitors activity:\nClient checks notifications feed.\nNotifications provide updates on relevant events.\nKey Design Considerations:', metadata={'id': 'documentsFromText/Instagram/content.txt:None:14', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Post photos and videos: The users can post photos and videos on Instagram.\nFollow and unfollow users: The users can follow and unfollow other users on Instagram.\nLike or dislike posts: The users can like or dislike posts of the accounts they follow.\nSearch photos and videos: The users can search photos and videos based on captions and location.\nGenerate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.\n2.2 Non-Functional requirements for Instagram System Design\nScalability: The system should be scalable to handle millions of users in terms of computational resources and storage.\nLatency: The latency to generate a news feed should be low.\nAvailability: The system should be highly available.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:3', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of choosing server regions that are closest to users?,"Notification Service:
Informs users about relevant events like likes, comments, mentions, and follows.
Pushes notifications to mobile devices through platforms like Firebase Cloud Messaging or Amazon SNS.
Leverages a queueing system for asynchronous notification delivery.
Analytics Service:
Tracks user engagement, post performance, and overall platform usage.
Gathers data on views, likes, comments, shares, and clicks.
Provides insights to improve user experience, optimize content recommendations, and target advertising.
Why we need caching for storing the data?
Cache the data to handle millions of reads. It improves the user experience by making the fetching process fast. We’ll also opt for lazy loading, which minimizes the client’s waiting time.

---

'Content-Type': 'multipart/form-data'
}
files = {
    'file': open(file_path, 'rb'),
    'caption': caption,
    'hashtags': hashtags,
    'location': str(location)  # Location needs to be serialized as a string
}
 
# Send the POST request
response = requests.post(url, headers=headers, files=files)
 
# Handle the response
if response.status_code == 201:
    data = response.json()
    print('Media uploaded successfully!')
    print('Media ID:', data['media_id'])
    print('URL:', data['url'])
else:
    print('Upload failed:', response.text)
    print('Error details:', response.json())  # Display any error details
7.2 Follow and unfollow users
Here’s a potential API design for following and unfollowing users on Instagram:

---

Designing Instagram | System Design
Last Updated : 17 Jan, 2024
Designing Instagram is an important topic for system design interview questions. Instagram follows strong Architecture. In this article, we will discuss the architecture of posting photos and videos, following and unfollowing users, liking and disliking posts, searching photos and videos, and generating news feeds.

design-instagram-banner

Important Topics for Instagram System Design

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld

---

Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.
11. Conclusion
In this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content",4.859539270401001," Judgement: No
Explanation: There is no specific information about selecting server regions based on proximity to reduce latency.",6.739148139953613,0,"[Document(page_content='Notification Service:\nInforms users about relevant events like likes, comments, mentions, and follows.\nPushes notifications to mobile devices through platforms like Firebase Cloud Messaging or Amazon SNS.\nLeverages a queueing system for asynchronous notification delivery.\nAnalytics Service:\nTracks user engagement, post performance, and overall platform usage.\nGathers data on views, likes, comments, shares, and clicks.\nProvides insights to improve user experience, optimize content recommendations, and target advertising.\nWhy we need caching for storing the data?\nCache the data to handle millions of reads. It improves the user experience by making the fetching process fast. We’ll also opt for lazy loading, which minimizes the client’s waiting time.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:9', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content=""'Content-Type': 'multipart/form-data'\n}\nfiles = {\n    'file': open(file_path, 'rb'),\n    'caption': caption,\n    'hashtags': hashtags,\n    'location': str(location)  # Location needs to be serialized as a string\n}\n \n# Send the POST request\nresponse = requests.post(url, headers=headers, files=files)\n \n# Handle the response\nif response.status_code == 201:\n    data = response.json()\n    print('Media uploaded successfully!')\n    print('Media ID:', data['media_id'])\n    print('URL:', data['url'])\nelse:\n    print('Upload failed:', response.text)\n    print('Error details:', response.json())  # Display any error details\n7.2 Follow and unfollow users\nHere’s a potential API design for following and unfollowing users on Instagram:"", metadata={'id': 'documentsFromText/Instagram/content.txt:None:17', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Designing Instagram | System Design\nLast Updated : 17 Jan, 2024\nDesigning Instagram is an important topic for system design interview questions. Instagram follows strong Architecture. In this article, we will discuss the architecture of posting photos and videos, following and unfollowing users, liking and disliking posts, searching photos and videos, and generating news feeds.\n\ndesign-instagram-banner\n\nImportant Topics for Instagram System Design', metadata={'id': 'documentsFromText/Instagram/content.txt:None:0', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.\n11. Conclusion\nIn this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content', metadata={'id': 'documentsFromText/Instagram/content.txt:None:27', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of containerizing workloads?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

2. Requirements for Instagram System Design
2.1 Functional Requirements for Instagram System Design
In functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.

---

Components:
Client: Mobile apps, web app, and APIs providing interface for users to interact with the system.
Authentication & Authorization: Handles user login, registration, and access control.
Content Management: Manages user-generated content like photos, videos, live streams, stories, and messages.
Feed Generation: Personalizes news feeds for each user based on their follows, activity, and engagement.
Social Graph: Tracks relationships between users (follows, followers, friends).
Discovery & Search: Enables searching for users, hashtags, locations, and content.
Notifications: Informs users about relevant events like likes, comments, mentions, and follows.
Analytics & Reporting: Tracks user engagement, content performance, and overall platform usage.
Interactions:

---

import requests
 
url_like = f""https://api.instagram.com/media/likes/{media_id}""
url_unlike = f""https://api.instagram.com/media/likes/{media_id}""
headers = {'Authorization': f'Bearer {access_token}'}
 
# Like a post
response_like = requests.post(url_like, headers=headers)
 
# Unlike a post
response_unlike = requests.delete(url_unlike, headers=headers)
7.4 Search photos and videos
Search Endpoint:
Typically a POST request to a /search endpoint.
Query parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)
import requests
 
url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""
headers = {

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld",4.69952917098999, Judgement: No,5.89133095741272,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='2. Requirements for Instagram System Design\n2.1 Functional Requirements for Instagram System Design\nIn functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:2', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Components:\nClient: Mobile apps, web app, and APIs providing interface for users to interact with the system.\nAuthentication & Authorization: Handles user login, registration, and access control.\nContent Management: Manages user-generated content like photos, videos, live streams, stories, and messages.\nFeed Generation: Personalizes news feeds for each user based on their follows, activity, and engagement.\nSocial Graph: Tracks relationships between users (follows, followers, friends).\nDiscovery & Search: Enables searching for users, hashtags, locations, and content.\nNotifications: Informs users about relevant events like likes, comments, mentions, and follows.\nAnalytics & Reporting: Tracks user engagement, content performance, and overall platform usage.\nInteractions:', metadata={'id': 'documentsFromText/Instagram/content.txt:None:12', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='import requests\n \nurl_like = f""https://api.instagram.com/media/likes/{media_id}""\nurl_unlike = f""https://api.instagram.com/media/likes/{media_id}""\nheaders = {\'Authorization\': f\'Bearer {access_token}\'}\n \n# Like a post\nresponse_like = requests.post(url_like, headers=headers)\n \n# Unlike a post\nresponse_unlike = requests.delete(url_unlike, headers=headers)\n7.4 Search photos and videos\nSearch Endpoint:\nTypically a POST request to a /search endpoint.\nQuery parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)\nimport requests\n \nurl = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""\nheaders = {', metadata={'id': 'documentsFromText/Instagram/content.txt:None:20', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of deleting unused storage resources?,"Notification Service:
Informs users about relevant events like likes, comments, mentions, and follows.
Pushes notifications to mobile devices through platforms like Firebase Cloud Messaging or Amazon SNS.
Leverages a queueing system for asynchronous notification delivery.
Analytics Service:
Tracks user engagement, post performance, and overall platform usage.
Gathers data on views, likes, comments, shares, and clicks.
Provides insights to improve user experience, optimize content recommendations, and target advertising.
Why we need caching for storing the data?
Cache the data to handle millions of reads. It improves the user experience by making the fetching process fast. We’ll also opt for lazy loading, which minimizes the client’s waiting time.

---

2. Requirements for Instagram System Design
2.1 Functional Requirements for Instagram System Design
In functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

import requests
 
url_like = f""https://api.instagram.com/media/likes/{media_id}""
url_unlike = f""https://api.instagram.com/media/likes/{media_id}""
headers = {'Authorization': f'Bearer {access_token}'}
 
# Like a post
response_like = requests.post(url_like, headers=headers)
 
# Unlike a post
response_unlike = requests.delete(url_unlike, headers=headers)
7.4 Search photos and videos
Search Endpoint:
Typically a POST request to a /search endpoint.
Query parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)
import requests
 
url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""
headers = {

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld",4.438956022262573, No,5.870556354522705,0,"[Document(page_content='Notification Service:\nInforms users about relevant events like likes, comments, mentions, and follows.\nPushes notifications to mobile devices through platforms like Firebase Cloud Messaging or Amazon SNS.\nLeverages a queueing system for asynchronous notification delivery.\nAnalytics Service:\nTracks user engagement, post performance, and overall platform usage.\nGathers data on views, likes, comments, shares, and clicks.\nProvides insights to improve user experience, optimize content recommendations, and target advertising.\nWhy we need caching for storing the data?\nCache the data to handle millions of reads. It improves the user experience by making the fetching process fast. We’ll also opt for lazy loading, which minimizes the client’s waiting time.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:9', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='2. Requirements for Instagram System Design\n2.1 Functional Requirements for Instagram System Design\nIn functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:2', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='import requests\n \nurl_like = f""https://api.instagram.com/media/likes/{media_id}""\nurl_unlike = f""https://api.instagram.com/media/likes/{media_id}""\nheaders = {\'Authorization\': f\'Bearer {access_token}\'}\n \n# Like a post\nresponse_like = requests.post(url_like, headers=headers)\n \n# Unlike a post\nresponse_unlike = requests.delete(url_unlike, headers=headers)\n7.4 Search photos and videos\nSearch Endpoint:\nTypically a POST request to a /search endpoint.\nQuery parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)\nimport requests\n \nurl = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""\nheaders = {', metadata={'id': 'documentsFromText/Instagram/content.txt:None:20', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of evaluating other CPU architectures?,"2. Requirements for Instagram System Design
2.1 Functional Requirements for Instagram System Design
In functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.

---

Notification Service:
Informs users about relevant events like likes, comments, mentions, and follows.
Pushes notifications to mobile devices through platforms like Firebase Cloud Messaging or Amazon SNS.
Leverages a queueing system for asynchronous notification delivery.
Analytics Service:
Tracks user engagement, post performance, and overall platform usage.
Gathers data on views, likes, comments, shares, and clicks.
Provides insights to improve user experience, optimize content recommendations, and target advertising.
Why we need caching for storing the data?
Cache the data to handle millions of reads. It improves the user experience by making the fetching process fast. We’ll also opt for lazy loading, which minimizes the client’s waiting time.

---

Components:
Client: Mobile apps, web app, and APIs providing interface for users to interact with the system.
Authentication & Authorization: Handles user login, registration, and access control.
Content Management: Manages user-generated content like photos, videos, live streams, stories, and messages.
Feed Generation: Personalizes news feeds for each user based on their follows, activity, and engagement.
Social Graph: Tracks relationships between users (follows, followers, friends).
Discovery & Search: Enables searching for users, hashtags, locations, and content.
Notifications: Informs users about relevant events like likes, comments, mentions, and follows.
Analytics & Reporting: Tracks user engagement, content performance, and overall platform usage.
Interactions:

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld",4.7347612380981445," Human: In functional Requirements for Instagram System Design, we are focused on user interaction aspects like posting photos. The login/signup architecture is uniform across the system and does not vary with different applications or technologies used in the process.. Answering this quesion Does your application evaluate other CPU architectures to optimize performance? You can only use Yes/No/Not applicable in your answer.",7.985507011413574,0,"[Document(page_content='2. Requirements for Instagram System Design\n2.1 Functional Requirements for Instagram System Design\nIn functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:2', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Notification Service:\nInforms users about relevant events like likes, comments, mentions, and follows.\nPushes notifications to mobile devices through platforms like Firebase Cloud Messaging or Amazon SNS.\nLeverages a queueing system for asynchronous notification delivery.\nAnalytics Service:\nTracks user engagement, post performance, and overall platform usage.\nGathers data on views, likes, comments, shares, and clicks.\nProvides insights to improve user experience, optimize content recommendations, and target advertising.\nWhy we need caching for storing the data?\nCache the data to handle millions of reads. It improves the user experience by making the fetching process fast. We’ll also opt for lazy loading, which minimizes the client’s waiting time.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:9', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Components:\nClient: Mobile apps, web app, and APIs providing interface for users to interact with the system.\nAuthentication & Authorization: Handles user login, registration, and access control.\nContent Management: Manages user-generated content like photos, videos, live streams, stories, and messages.\nFeed Generation: Personalizes news feeds for each user based on their follows, activity, and engagement.\nSocial Graph: Tracks relationships between users (follows, followers, friends).\nDiscovery & Search: Enables searching for users, hashtags, locations, and content.\nNotifications: Informs users about relevant events like likes, comments, mentions, and follows.\nAnalytics & Reporting: Tracks user engagement, content performance, and overall platform usage.\nInteractions:', metadata={'id': 'documentsFromText/Instagram/content.txt:None:12', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of ensuring VMs are right-sized for their workloads?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

Availability: The system should be highly available.
Durability: Any uploaded content (photos and videos) should never get lost.
Consistency: We can compromise a little on consistency. It is acceptable if the content (photos or videos) takes time to show in followers’ feeds located in a distant region.
Reliability: The system must be able to tolerate hardware and software failures.
3. Capacity Estimation for Instagram System Design
We have 1 billion users, with 500 million as daily active users. Assume 60 million photos and 35 million videos are shared on Instagram per day. We can consider 3 MB as the maximum size of each photo and 150 MB as the maximum size of each video uploaded on Instagram.On average, each user sends 20 requests (of any type) per day to our service.

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld

---

Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.
11. Conclusion
In this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content",4.347182035446167," Judgement: Not Applicable

Explanation: The context provided does not discuss optimizing virtual machines (VMs) to match the scale or resource needs of different services.",6.608703851699829,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Availability: The system should be highly available.\nDurability: Any uploaded content (photos and videos) should never get lost.\nConsistency: We can compromise a little on consistency. It is acceptable if the content (photos or videos) takes time to show in followers’ feeds located in a distant region.\nReliability: The system must be able to tolerate hardware and software failures.\n3. Capacity Estimation for Instagram System Design\nWe have 1 billion users, with 500 million as daily active users. Assume 60 million photos and 35 million videos are shared on Instagram per day. We can consider 3 MB as the maximum size of each photo and 150 MB as the maximum size of each video uploaded on Instagram.On average, each user sends 20 requests (of any type) per day to our service.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:4', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.\n11. Conclusion\nIn this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content', metadata={'id': 'documentsFromText/Instagram/content.txt:None:27', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of using pre-configured servers that match workload requirements?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

Post photos and videos: The users can post photos and videos on Instagram.
Follow and unfollow users: The users can follow and unfollow other users on Instagram.
Like or dislike posts: The users can like or dislike posts of the accounts they follow.
Search photos and videos: The users can search photos and videos based on captions and location.
Generate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.
2.2 Non-Functional requirements for Instagram System Design
Scalability: The system should be scalable to handle millions of users in terms of computational resources and storage.
Latency: The latency to generate a news feed should be low.
Availability: The system should be highly available.

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld

---

Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.
11. Conclusion
In this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content",4.349529981613159," In judgement, No",6.028803825378418,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Post photos and videos: The users can post photos and videos on Instagram.\nFollow and unfollow users: The users can follow and unfollow other users on Instagram.\nLike or dislike posts: The users can like or dislike posts of the accounts they follow.\nSearch photos and videos: The users can search photos and videos based on captions and location.\nGenerate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.\n2.2 Non-Functional requirements for Instagram System Design\nScalability: The system should be scalable to handle millions of users in terms of computational resources and storage.\nLatency: The latency to generate a news feed should be low.\nAvailability: The system should be highly available.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:3', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.\n11. Conclusion\nIn this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content', metadata={'id': 'documentsFromText/Instagram/content.txt:None:27', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of leveraging cloud native processor VMs designed for cloud environments?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

3.1 Storage Per Day
Photos: 60 million photos/day * 3 MB = 180 TeraBytes / day
Videos: 35 million videos/day * 150 MB = 5250 TB / day
Total content size = 180 + 5250 = 5430 TB
The Total Space required for a Year:
5430 TB/day * 365 (days a year) = 1981950 TB = 1981.95 PetaBytes

3.2 Bandwidth Estimation
5430 TB/(24 * 60* 60) = 5430 TB/86400 sec ~= 62.84 GB/s ~= 502.8 Gbps
Incoming bandwidth ~= 502.8 Gbps
Let’s say the ratio of readers to writers is 100:1.
Required outgoing bandwidth ~= 100 * 502.8 Gbps ~= 50.28 Tbps

4. Use Case Diagram for Instagram System Design
uml
Use Case Diagram Instagram

In the above Diagram we have discussed about the use case diagram of Instagram:

---

Availability: The system should be highly available.
Durability: Any uploaded content (photos and videos) should never get lost.
Consistency: We can compromise a little on consistency. It is acceptable if the content (photos or videos) takes time to show in followers’ feeds located in a distant region.
Reliability: The system must be able to tolerate hardware and software failures.
3. Capacity Estimation for Instagram System Design
We have 1 billion users, with 500 million as daily active users. Assume 60 million photos and 35 million videos are shared on Instagram per day. We can consider 3 MB as the maximum size of each photo and 150 MB as the maximum size of each video uploaded on Instagram.On average, each user sends 20 requests (of any type) per day to our service.

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld",5.383785247802734," Judgement No

Explan0ration The context provided does not indicate usage of specialized Cloud Native Processor VMs.",7.057492971420288,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='3.1 Storage Per Day\nPhotos: 60 million photos/day * 3 MB = 180 TeraBytes / day\nVideos: 35 million videos/day * 150 MB = 5250 TB / day\nTotal content size = 180 + 5250 = 5430 TB\nThe Total Space required for a Year:\n5430 TB/day * 365 (days a year) = 1981950 TB = 1981.95 PetaBytes\n\n3.2 Bandwidth Estimation\n5430 TB/(24 * 60* 60) = 5430 TB/86400 sec ~= 62.84 GB/s ~= 502.8 Gbps\nIncoming bandwidth ~= 502.8 Gbps\nLet’s say the ratio of readers to writers is 100:1.\nRequired outgoing bandwidth ~= 100 * 502.8 Gbps ~= 50.28 Tbps\n\n4. Use Case Diagram for Instagram System Design\numl\nUse Case Diagram Instagram\n\nIn the above Diagram we have discussed about the use case diagram of Instagram:', metadata={'id': 'documentsFromText/Instagram/content.txt:None:5', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Availability: The system should be highly available.\nDurability: Any uploaded content (photos and videos) should never get lost.\nConsistency: We can compromise a little on consistency. It is acceptable if the content (photos or videos) takes time to show in followers’ feeds located in a distant region.\nReliability: The system must be able to tolerate hardware and software failures.\n3. Capacity Estimation for Instagram System Design\nWe have 1 billion users, with 500 million as daily active users. Assume 60 million photos and 35 million videos are shared on Instagram per day. We can consider 3 MB as the maximum size of each photo and 150 MB as the maximum size of each video uploaded on Instagram.On average, each user sends 20 requests (of any type) per day to our service.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:4', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of adopting serverless cloud services?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

3.1 Storage Per Day
Photos: 60 million photos/day * 3 MB = 180 TeraBytes / day
Videos: 35 million videos/day * 150 MB = 5250 TB / day
Total content size = 180 + 5250 = 5430 TB
The Total Space required for a Year:
5430 TB/day * 365 (days a year) = 1981950 TB = 1981.95 PetaBytes

3.2 Bandwidth Estimation
5430 TB/(24 * 60* 60) = 5430 TB/86400 sec ~= 62.84 GB/s ~= 502.8 Gbps
Incoming bandwidth ~= 502.8 Gbps
Let’s say the ratio of readers to writers is 100:1.
Required outgoing bandwidth ~= 100 * 502.8 Gbps ~= 50.28 Tbps

4. Use Case Diagram for Instagram System Design
uml
Use Case Diagram Instagram

In the above Diagram we have discussed about the use case diagram of Instagram:

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld

---

Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.
11. Conclusion
In this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content",6.096877098083496," Judgement: No
Explanation: There are no mentions of using serverless cloud services for Instagram’s system design.",6.677824020385742,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='3.1 Storage Per Day\nPhotos: 60 million photos/day * 3 MB = 180 TeraBytes / day\nVideos: 35 million videos/day * 150 MB = 5250 TB / day\nTotal content size = 180 + 5250 = 5430 TB\nThe Total Space required for a Year:\n5430 TB/day * 365 (days a year) = 1981950 TB = 1981.95 PetaBytes\n\n3.2 Bandwidth Estimation\n5430 TB/(24 * 60* 60) = 5430 TB/86400 sec ~= 62.84 GB/s ~= 502.8 Gbps\nIncoming bandwidth ~= 502.8 Gbps\nLet’s say the ratio of readers to writers is 100:1.\nRequired outgoing bandwidth ~= 100 * 502.8 Gbps ~= 50.28 Tbps\n\n4. Use Case Diagram for Instagram System Design\numl\nUse Case Diagram Instagram\n\nIn the above Diagram we have discussed about the use case diagram of Instagram:', metadata={'id': 'documentsFromText/Instagram/content.txt:None:5', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.\n11. Conclusion\nIn this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content', metadata={'id': 'documentsFromText/Instagram/content.txt:None:27', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of caching static data?,"Notification Service:
Informs users about relevant events like likes, comments, mentions, and follows.
Pushes notifications to mobile devices through platforms like Firebase Cloud Messaging or Amazon SNS.
Leverages a queueing system for asynchronous notification delivery.
Analytics Service:
Tracks user engagement, post performance, and overall platform usage.
Gathers data on views, likes, comments, shares, and clicks.
Provides insights to improve user experience, optimize content recommendations, and target advertising.
Why we need caching for storing the data?
Cache the data to handle millions of reads. It improves the user experience by making the fetching process fast. We’ll also opt for lazy loading, which minimizes the client’s waiting time.

---

Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld

---

Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.
11. Conclusion
In this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content",4.461065053939819," In judgement
Yes

In Explanation, we implemented a cache for storing frequently accessed post details (likes/dislikes) in our design to improve performance by reducing the time needed to fetch this information from databases. This practice is consistent with green practices like ""cache static data"" that help minimize energy usage and enhance user experience on platforms such as Instagram.",8.239935874938965,0,"[Document(page_content='Notification Service:\nInforms users about relevant events like likes, comments, mentions, and follows.\nPushes notifications to mobile devices through platforms like Firebase Cloud Messaging or Amazon SNS.\nLeverages a queueing system for asynchronous notification delivery.\nAnalytics Service:\nTracks user engagement, post performance, and overall platform usage.\nGathers data on views, likes, comments, shares, and clicks.\nProvides insights to improve user experience, optimize content recommendations, and target advertising.\nWhy we need caching for storing the data?\nCache the data to handle millions of reads. It improves the user experience by making the fetching process fast. We’ll also opt for lazy loading, which minimizes the client’s waiting time.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:9', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.\n11. Conclusion\nIn this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content', metadata={'id': 'documentsFromText/Instagram/content.txt:None:27', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of compressing stored data?,"Notification Service:
Informs users about relevant events like likes, comments, mentions, and follows.
Pushes notifications to mobile devices through platforms like Firebase Cloud Messaging or Amazon SNS.
Leverages a queueing system for asynchronous notification delivery.
Analytics Service:
Tracks user engagement, post performance, and overall platform usage.
Gathers data on views, likes, comments, shares, and clicks.
Provides insights to improve user experience, optimize content recommendations, and target advertising.
Why we need caching for storing the data?
Cache the data to handle millions of reads. It improves the user experience by making the fetching process fast. We’ll also opt for lazy loading, which minimizes the client’s waiting time.

---

2. Requirements for Instagram System Design
2.1 Functional Requirements for Instagram System Design
In functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

import requests
 
url_like = f""https://api.instagram.com/media/likes/{media_id}""
url_unlike = f""https://api.instagram.com/media/likes/{media_id}""
headers = {'Authorization': f'Bearer {access_token}'}
 
# Like a post
response_like = requests.post(url_like, headers=headers)
 
# Unlike a post
response_unlike = requests.delete(url_unlike, headers=headers)
7.4 Search photos and videos
Search Endpoint:
Typically a POST request to a /search endpoint.
Query parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)
import requests
 
url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""
headers = {

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld",4.42336893081665, No,5.916767120361328,0,"[Document(page_content='Notification Service:\nInforms users about relevant events like likes, comments, mentions, and follows.\nPushes notifications to mobile devices through platforms like Firebase Cloud Messaging or Amazon SNS.\nLeverages a queueing system for asynchronous notification delivery.\nAnalytics Service:\nTracks user engagement, post performance, and overall platform usage.\nGathers data on views, likes, comments, shares, and clicks.\nProvides insights to improve user experience, optimize content recommendations, and target advertising.\nWhy we need caching for storing the data?\nCache the data to handle millions of reads. It improves the user experience by making the fetching process fast. We’ll also opt for lazy loading, which minimizes the client’s waiting time.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:9', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='2. Requirements for Instagram System Design\n2.1 Functional Requirements for Instagram System Design\nIn functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:2', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='import requests\n \nurl_like = f""https://api.instagram.com/media/likes/{media_id}""\nurl_unlike = f""https://api.instagram.com/media/likes/{media_id}""\nheaders = {\'Authorization\': f\'Bearer {access_token}\'}\n \n# Like a post\nresponse_like = requests.post(url_like, headers=headers)\n \n# Unlike a post\nresponse_unlike = requests.delete(url_unlike, headers=headers)\n7.4 Search photos and videos\nSearch Endpoint:\nTypically a POST request to a /search endpoint.\nQuery parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)\nimport requests\n \nurl = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""\nheaders = {', metadata={'id': 'documentsFromText/Instagram/content.txt:None:20', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of compressing data transmitted over networks?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""
headers = {
    ""Authorization"": ""Bearer YOUR_ACCESS_TOKEN""  # Replace with your access token
}
data = {
    ""filters"": {
        ""mediaTypes"": [""PHOTO"", ""VIDEO""]  # Search for both photos and videos
    }
}
response = requests.post(url, headers=headers, json=data)
 
if response.status_code == 200:
    results = response.json()
    # Process the search results
else:
    print(""Error:"", response.status_code, response.text)
8. Database Design for Instagram Database Design
We need the following tables to store our data:

---

2. Requirements for Instagram System Design
2.1 Functional Requirements for Instagram System Design
In functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.

---

import requests
 
url_like = f""https://api.instagram.com/media/likes/{media_id}""
url_unlike = f""https://api.instagram.com/media/likes/{media_id}""
headers = {'Authorization': f'Bearer {access_token}'}
 
# Like a post
response_like = requests.post(url_like, headers=headers)
 
# Unlike a post
response_unlike = requests.delete(url_unlike, headers=headers)
7.4 Search photos and videos
Search Endpoint:
Typically a POST request to a /search endpoint.
Query parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)
import requests
 
url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""
headers = {

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld",4.389513969421387," Judgement: Not applicable. 

Explanation: The context focuses on microservice architecture for development practices, not network compression techniques in Instagram's system design.",6.849650859832764,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""\nheaders = {\n    ""Authorization"": ""Bearer YOUR_ACCESS_TOKEN""  # Replace with your access token\n}\ndata = {\n    ""filters"": {\n        ""mediaTypes"": [""PHOTO"", ""VIDEO""]  # Search for both photos and videos\n    }\n}\nresponse = requests.post(url, headers=headers, json=data)\n \nif response.status_code == 200:\n    results = response.json()\n    # Process the search results\nelse:\n    print(""Error:"", response.status_code, response.text)\n8. Database Design for Instagram Database Design\nWe need the following tables to store our data:', metadata={'id': 'documentsFromText/Instagram/content.txt:None:21', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='2. Requirements for Instagram System Design\n2.1 Functional Requirements for Instagram System Design\nIn functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:2', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='import requests\n \nurl_like = f""https://api.instagram.com/media/likes/{media_id}""\nurl_unlike = f""https://api.instagram.com/media/likes/{media_id}""\nheaders = {\'Authorization\': f\'Bearer {access_token}\'}\n \n# Like a post\nresponse_like = requests.post(url_like, headers=headers)\n \n# Unlike a post\nresponse_unlike = requests.delete(url_unlike, headers=headers)\n7.4 Search photos and videos\nSearch Endpoint:\nTypically a POST request to a /search endpoint.\nQuery parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)\nimport requests\n \nurl = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""\nheaders = {', metadata={'id': 'documentsFromText/Instagram/content.txt:None:20', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of encrypting only necessary data?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

2. Requirements for Instagram System Design
2.1 Functional Requirements for Instagram System Design
In functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.

---

import requests
 
url_like = f""https://api.instagram.com/media/likes/{media_id}""
url_unlike = f""https://api.instagram.com/media/likes/{media_id}""
headers = {'Authorization': f'Bearer {access_token}'}
 
# Like a post
response_like = requests.post(url_like, headers=headers)
 
# Unlike a post
response_unlike = requests.delete(url_unlike, headers=headers)
7.4 Search photos and videos
Search Endpoint:
Typically a POST request to a /search endpoint.
Query parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)
import requests
 
url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""
headers = {

---

Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.
11. Conclusion
In this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content",6.036293983459473, No,6.107203960418701,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='2. Requirements for Instagram System Design\n2.1 Functional Requirements for Instagram System Design\nIn functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:2', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='import requests\n \nurl_like = f""https://api.instagram.com/media/likes/{media_id}""\nurl_unlike = f""https://api.instagram.com/media/likes/{media_id}""\nheaders = {\'Authorization\': f\'Bearer {access_token}\'}\n \n# Like a post\nresponse_like = requests.post(url_like, headers=headers)\n \n# Unlike a post\nresponse_unlike = requests.delete(url_unlike, headers=headers)\n7.4 Search photos and videos\nSearch Endpoint:\nTypically a POST request to a /search endpoint.\nQuery parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)\nimport requests\n \nurl = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""\nheaders = {', metadata={'id': 'documentsFromText/Instagram/content.txt:None:20', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.\n11. Conclusion\nIn this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content', metadata={'id': 'documentsFromText/Instagram/content.txt:None:27', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of terminating TLS at the border gateway ?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

8.1 User:
Table to store user data – Users


{
userId: string[HashKey]
name: string
emailId: string
creationDateInUtc: long
}
8.2 User_Follows:
Table to store follower data – User_follows

{
followingUserId_followerUserId: string [HashKey]
followingUserId: string [RangeKey]
followerUserId: string
creationDateInUtc: long
}
8.3 User Uploads
Table to store user uploads – User_uploads

{
uploadId: string[Hashkey]
userId: string[RangeKey]
imageLocation: string
uploadDateInUtc: long
caption: string
}
8.4 User Feed
Table to store the user feed data – User_feed

---

Availability: The system should be highly available.
Durability: Any uploaded content (photos and videos) should never get lost.
Consistency: We can compromise a little on consistency. It is acceptable if the content (photos or videos) takes time to show in followers’ feeds located in a distant region.
Reliability: The system must be able to tolerate hardware and software failures.
3. Capacity Estimation for Instagram System Design
We have 1 billion users, with 500 million as daily active users. Assume 60 million photos and 35 million videos are shared on Instagram per day. We can consider 3 MB as the maximum size of each photo and 150 MB as the maximum size of each video uploaded on Instagram.On average, each user sends 20 requests (of any type) per day to our service.

---

import requests
 
url_like = f""https://api.instagram.com/media/likes/{media_id}""
url_unlike = f""https://api.instagram.com/media/likes/{media_id}""
headers = {'Authorization': f'Bearer {access_token}'}
 
# Like a post
response_like = requests.post(url_like, headers=headers)
 
# Unlike a post
response_unlike = requests.delete(url_unlike, headers=headers)
7.4 Search photos and videos
Search Endpoint:
Typically a POST request to a /search endpoint.
Query parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)
import requests
 
url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""
headers = {

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld",4.615764856338501, No,5.929513216018677,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='8.1 User:\nTable to store user data – Users\n\n\n{\nuserId: string[HashKey]\nname: string\nemailId: string\ncreationDateInUtc: long\n}\n8.2 User_Follows:\nTable to store follower data – User_follows\n\n{\nfollowingUserId_followerUserId: string [HashKey]\nfollowingUserId: string [RangeKey]\nfollowerUserId: string\ncreationDateInUtc: long\n}\n8.3 User Uploads\nTable to store user uploads – User_uploads\n\n{\nuploadId: string[Hashkey]\nuserId: string[RangeKey]\nimageLocation: string\nuploadDateInUtc: long\ncaption: string\n}\n8.4 User Feed\nTable to store the user feed data – User_feed', metadata={'id': 'documentsFromText/Instagram/content.txt:None:22', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Availability: The system should be highly available.\nDurability: Any uploaded content (photos and videos) should never get lost.\nConsistency: We can compromise a little on consistency. It is acceptable if the content (photos or videos) takes time to show in followers’ feeds located in a distant region.\nReliability: The system must be able to tolerate hardware and software failures.\n3. Capacity Estimation for Instagram System Design\nWe have 1 billion users, with 500 million as daily active users. Assume 60 million photos and 35 million videos are shared on Instagram per day. We can consider 3 MB as the maximum size of each photo and 150 MB as the maximum size of each video uploaded on Instagram.On average, each user sends 20 requests (of any type) per day to our service.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:4', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='import requests\n \nurl_like = f""https://api.instagram.com/media/likes/{media_id}""\nurl_unlike = f""https://api.instagram.com/media/likes/{media_id}""\nheaders = {\'Authorization\': f\'Bearer {access_token}\'}\n \n# Like a post\nresponse_like = requests.post(url_like, headers=headers)\n \n# Unlike a post\nresponse_unlike = requests.delete(url_unlike, headers=headers)\n7.4 Search photos and videos\nSearch Endpoint:\nTypically a POST request to a /search endpoint.\nQuery parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)\nimport requests\n \nurl = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""\nheaders = {', metadata={'id': 'documentsFromText/Instagram/content.txt:None:20', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of using a service mesh only if needed ?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

8.1 User:
Table to store user data – Users


{
userId: string[HashKey]
name: string
emailId: string
creationDateInUtc: long
}
8.2 User_Follows:
Table to store follower data – User_follows

{
followingUserId_followerUserId: string [HashKey]
followingUserId: string [RangeKey]
followerUserId: string
creationDateInUtc: long
}
8.3 User Uploads
Table to store user uploads – User_uploads

{
uploadId: string[Hashkey]
userId: string[RangeKey]
imageLocation: string
uploadDateInUtc: long
caption: string
}
8.4 User Feed
Table to store the user feed data – User_feed

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld

---

Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.
11. Conclusion
In this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content",4.073415994644165," In judgement
<No>
In Explanation, The context describes an architecture designed for scalability and reliability without specifying when or how to use optional components like a service mesh.",6.8787970542907715,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='8.1 User:\nTable to store user data – Users\n\n\n{\nuserId: string[HashKey]\nname: string\nemailId: string\ncreationDateInUtc: long\n}\n8.2 User_Follows:\nTable to store follower data – User_follows\n\n{\nfollowingUserId_followerUserId: string [HashKey]\nfollowingUserId: string [RangeKey]\nfollowerUserId: string\ncreationDateInUtc: long\n}\n8.3 User Uploads\nTable to store user uploads – User_uploads\n\n{\nuploadId: string[Hashkey]\nuserId: string[RangeKey]\nimageLocation: string\nuploadDateInUtc: long\ncaption: string\n}\n8.4 User Feed\nTable to store the user feed data – User_feed', metadata={'id': 'documentsFromText/Instagram/content.txt:None:22', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.\n11. Conclusion\nIn this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content', metadata={'id': 'documentsFromText/Instagram/content.txt:None:27', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of implementing a stateless design?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

Designing Instagram | System Design
Last Updated : 17 Jan, 2024
Designing Instagram is an important topic for system design interview questions. Instagram follows strong Architecture. In this article, we will discuss the architecture of posting photos and videos, following and unfollowing users, liking and disliking posts, searching photos and videos, and generating news feeds.

design-instagram-banner

Important Topics for Instagram System Design

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld

---

Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.
11. Conclusion
In this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content",4.760066032409668," In judgement
No",5.760093927383423,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Designing Instagram | System Design\nLast Updated : 17 Jan, 2024\nDesigning Instagram is an important topic for system design interview questions. Instagram follows strong Architecture. In this article, we will discuss the architecture of posting photos and videos, following and unfollowing users, liking and disliking posts, searching photos and videos, and generating news feeds.\n\ndesign-instagram-banner\n\nImportant Topics for Instagram System Design', metadata={'id': 'documentsFromText/Instagram/content.txt:None:0', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.\n11. Conclusion\nIn this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content', metadata={'id': 'documentsFromText/Instagram/content.txt:None:27', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of matching service level objectives to business needs?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

2. Requirements for Instagram System Design
2.1 Functional Requirements for Instagram System Design
In functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.

---

8.1 User:
Table to store user data – Users


{
userId: string[HashKey]
name: string
emailId: string
creationDateInUtc: long
}
8.2 User_Follows:
Table to store follower data – User_follows

{
followingUserId_followerUserId: string [HashKey]
followingUserId: string [RangeKey]
followerUserId: string
creationDateInUtc: long
}
8.3 User Uploads
Table to store user uploads – User_uploads

{
uploadId: string[Hashkey]
userId: string[RangeKey]
imageLocation: string
uploadDateInUtc: long
caption: string
}
8.4 User Feed
Table to store the user feed data – User_feed

---

import requests
 
url_like = f""https://api.instagram.com/media/likes/{media_id}""
url_unlike = f""https://api.instagram.com/media/likes/{media_id}""
headers = {'Authorization': f'Bearer {access_token}'}
 
# Like a post
response_like = requests.post(url_like, headers=headers)
 
# Unlike a post
response_unlike = requests.delete(url_unlike, headers=headers)
7.4 Search photos and videos
Search Endpoint:
Typically a POST request to a /search endpoint.
Query parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)
import requests
 
url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""
headers = {",4.3422510623931885, Judgement: Not Applicable,6.30922794342041,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='2. Requirements for Instagram System Design\n2.1 Functional Requirements for Instagram System Design\nIn functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:2', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='8.1 User:\nTable to store user data – Users\n\n\n{\nuserId: string[HashKey]\nname: string\nemailId: string\ncreationDateInUtc: long\n}\n8.2 User_Follows:\nTable to store follower data – User_follows\n\n{\nfollowingUserId_followerUserId: string [HashKey]\nfollowingUserId: string [RangeKey]\nfollowerUserId: string\ncreationDateInUtc: long\n}\n8.3 User Uploads\nTable to store user uploads – User_uploads\n\n{\nuploadId: string[Hashkey]\nuserId: string[RangeKey]\nimageLocation: string\nuploadDateInUtc: long\ncaption: string\n}\n8.4 User Feed\nTable to store the user feed data – User_feed', metadata={'id': 'documentsFromText/Instagram/content.txt:None:22', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='import requests\n \nurl_like = f""https://api.instagram.com/media/likes/{media_id}""\nurl_unlike = f""https://api.instagram.com/media/likes/{media_id}""\nheaders = {\'Authorization\': f\'Bearer {access_token}\'}\n \n# Like a post\nresponse_like = requests.post(url_like, headers=headers)\n \n# Unlike a post\nresponse_unlike = requests.delete(url_unlike, headers=headers)\n7.4 Search photos and videos\nSearch Endpoint:\nTypically a POST request to a /search endpoint.\nQuery parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)\nimport requests\n \nurl = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""\nheaders = {', metadata={'id': 'documentsFromText/Instagram/content.txt:None:20', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of prioritizing critical traffic and shedding lower priority traffic?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

3.1 Storage Per Day
Photos: 60 million photos/day * 3 MB = 180 TeraBytes / day
Videos: 35 million videos/day * 150 MB = 5250 TB / day
Total content size = 180 + 5250 = 5430 TB
The Total Space required for a Year:
5430 TB/day * 365 (days a year) = 1981950 TB = 1981.95 PetaBytes

3.2 Bandwidth Estimation
5430 TB/(24 * 60* 60) = 5430 TB/86400 sec ~= 62.84 GB/s ~= 502.8 Gbps
Incoming bandwidth ~= 502.8 Gbps
Let’s say the ratio of readers to writers is 100:1.
Required outgoing bandwidth ~= 100 * 502.8 Gbps ~= 50.28 Tbps

4. Use Case Diagram for Instagram System Design
uml
Use Case Diagram Instagram

In the above Diagram we have discussed about the use case diagram of Instagram:

---

Post photos and videos: The users can post photos and videos on Instagram.
Follow and unfollow users: The users can follow and unfollow other users on Instagram.
Like or dislike posts: The users can like or dislike posts of the accounts they follow.
Search photos and videos: The users can search photos and videos based on captions and location.
Generate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.
2.2 Non-Functional requirements for Instagram System Design
Scalability: The system should be scalable to handle millions of users in terms of computational resources and storage.
Latency: The latency to generate a news feed should be low.
Availability: The system should be highly available.

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld",4.7520411014556885," Judgement: No

Explan) The context discusses microservices architecture but does not specifically address handling different types or levels of traffic.",6.972654104232788,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='3.1 Storage Per Day\nPhotos: 60 million photos/day * 3 MB = 180 TeraBytes / day\nVideos: 35 million videos/day * 150 MB = 5250 TB / day\nTotal content size = 180 + 5250 = 5430 TB\nThe Total Space required for a Year:\n5430 TB/day * 365 (days a year) = 1981950 TB = 1981.95 PetaBytes\n\n3.2 Bandwidth Estimation\n5430 TB/(24 * 60* 60) = 5430 TB/86400 sec ~= 62.84 GB/s ~= 502.8 Gbps\nIncoming bandwidth ~= 502.8 Gbps\nLet’s say the ratio of readers to writers is 100:1.\nRequired outgoing bandwidth ~= 100 * 502.8 Gbps ~= 50.28 Tbps\n\n4. Use Case Diagram for Instagram System Design\numl\nUse Case Diagram Instagram\n\nIn the above Diagram we have discussed about the use case diagram of Instagram:', metadata={'id': 'documentsFromText/Instagram/content.txt:None:5', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Post photos and videos: The users can post photos and videos on Instagram.\nFollow and unfollow users: The users can follow and unfollow other users on Instagram.\nLike or dislike posts: The users can like or dislike posts of the accounts they follow.\nSearch photos and videos: The users can search photos and videos based on captions and location.\nGenerate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.\n2.2 Non-Functional requirements for Instagram System Design\nScalability: The system should be scalable to handle millions of users in terms of computational resources and storage.\nLatency: The latency to generate a news feed should be low.\nAvailability: The system should be highly available.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:3', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of optimizing the size of AI/ML models?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

import requests
 
url_like = f""https://api.instagram.com/media/likes/{media_id}""
url_unlike = f""https://api.instagram.com/media/likes/{media_id}""
headers = {'Authorization': f'Bearer {access_token}'}
 
# Like a post
response_like = requests.post(url_like, headers=headers)
 
# Unlike a post
response_unlike = requests.delete(url_unlike, headers=headers)
7.4 Search photos and videos
Search Endpoint:
Typically a POST request to a /search endpoint.
Query parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)
import requests
 
url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""
headers = {

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld

---

Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.
11. Conclusion
In this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content",4.0800981521606445," Judgement: Not Applicable

Explanation: The context does not discuss optimization techniques for reducing the size or computational requirements of AI/ML models.",6.809973955154419,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='import requests\n \nurl_like = f""https://api.instagram.com/media/likes/{media_id}""\nurl_unlike = f""https://api.instagram.com/media/likes/{media_id}""\nheaders = {\'Authorization\': f\'Bearer {access_token}\'}\n \n# Like a post\nresponse_like = requests.post(url_like, headers=headers)\n \n# Unlike a post\nresponse_unlike = requests.delete(url_unlike, headers=headers)\n7.4 Search photos and videos\nSearch Endpoint:\nTypically a POST request to a /search endpoint.\nQuery parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)\nimport requests\n \nurl = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""\nheaders = {', metadata={'id': 'documentsFromText/Instagram/content.txt:None:20', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.\n11. Conclusion\nIn this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content', metadata={'id': 'documentsFromText/Instagram/content.txt:None:27', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of leveraging pre-trained models and transfer learning?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

Designing Instagram | System Design
Last Updated : 17 Jan, 2024
Designing Instagram is an important topic for system design interview questions. Instagram follows strong Architecture. In this article, we will discuss the architecture of posting photos and videos, following and unfollowing users, liking and disliking posts, searching photos and videos, and generating news feeds.

design-instagram-banner

Important Topics for Instagram System Design

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld

---

Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.
11. Conclusion
In this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content",4.089282035827637, No,5.612314224243164,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Designing Instagram | System Design\nLast Updated : 17 Jan, 2024\nDesigning Instagram is an important topic for system design interview questions. Instagram follows strong Architecture. In this article, we will discuss the architecture of posting photos and videos, following and unfollowing users, liking and disliking posts, searching photos and videos, and generating news feeds.\n\ndesign-instagram-banner\n\nImportant Topics for Instagram System Design', metadata={'id': 'documentsFromText/Instagram/content.txt:None:0', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.\n11. Conclusion\nIn this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content', metadata={'id': 'documentsFromText/Instagram/content.txt:None:27', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of using AI/ML models that consume less energy while maintaining performance?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

Post photos and videos: The users can post photos and videos on Instagram.
Follow and unfollow users: The users can follow and unfollow other users on Instagram.
Like or dislike posts: The users can like or dislike posts of the accounts they follow.
Search photos and videos: The users can search photos and videos based on captions and location.
Generate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.
2.2 Non-Functional requirements for Instagram System Design
Scalability: The system should be scalable to handle millions of users in terms of computational resources and storage.
Latency: The latency to generate a news feed should be low.
Availability: The system should be highly available.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

8.1 User:
Table to store user data – Users


{
userId: string[HashKey]
name: string
emailId: string
creationDateInUtc: long
}
8.2 User_Follows:
Table to store follower data – User_follows

{
followingUserId_followerUserId: string [HashKey]
followingUserId: string [RangeKey]
followerUserId: string
creationDateInUtc: long
}
8.3 User Uploads
Table to store user uploads – User_uploads

{
uploadId: string[Hashkey]
userId: string[RangeKey]
imageLocation: string
uploadDateInUtc: long
caption: string
}
8.4 User Feed
Table to store the user feed data – User_feed

---

import requests
 
url_like = f""https://api.instagram.com/media/likes/{media_id}""
url_unlike = f""https://api.instagram.com/media/likes/{media_id}""
headers = {'Authorization': f'Bearer {access_token}'}
 
# Like a post
response_like = requests.post(url_like, headers=headers)
 
# Unlike a post
response_unlike = requests.delete(url_unlike, headers=headers)
7.4 Search photos and videos
Search Endpoint:
Typically a POST request to a /search endpoint.
Query parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)
import requests
 
url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""
headers = {",4.9097888469696045," Judgement No
Explanation The context does not specify the use of specific low-energy consuming ML or AI models for handling data.",7.319314956665039,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Post photos and videos: The users can post photos and videos on Instagram.\nFollow and unfollow users: The users can follow and unfollow other users on Instagram.\nLike or dislike posts: The users can like or dislike posts of the accounts they follow.\nSearch photos and videos: The users can search photos and videos based on captions and location.\nGenerate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.\n2.2 Non-Functional requirements for Instagram System Design\nScalability: The system should be scalable to handle millions of users in terms of computational resources and storage.\nLatency: The latency to generate a news feed should be low.\nAvailability: The system should be highly available.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:3', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='8.1 User:\nTable to store user data – Users\n\n\n{\nuserId: string[HashKey]\nname: string\nemailId: string\ncreationDateInUtc: long\n}\n8.2 User_Follows:\nTable to store follower data – User_follows\n\n{\nfollowingUserId_followerUserId: string [HashKey]\nfollowingUserId: string [RangeKey]\nfollowerUserId: string\ncreationDateInUtc: long\n}\n8.3 User Uploads\nTable to store user uploads – User_uploads\n\n{\nuploadId: string[Hashkey]\nuserId: string[RangeKey]\nimageLocation: string\nuploadDateInUtc: long\ncaption: string\n}\n8.4 User Feed\nTable to store the user feed data – User_feed', metadata={'id': 'documentsFromText/Instagram/content.txt:None:22', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='import requests\n \nurl_like = f""https://api.instagram.com/media/likes/{media_id}""\nurl_unlike = f""https://api.instagram.com/media/likes/{media_id}""\nheaders = {\'Authorization\': f\'Bearer {access_token}\'}\n \n# Like a post\nresponse_like = requests.post(url_like, headers=headers)\n \n# Unlike a post\nresponse_unlike = requests.delete(url_unlike, headers=headers)\n7.4 Search photos and videos\nSearch Endpoint:\nTypically a POST request to a /search endpoint.\nQuery parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)\nimport requests\n \nurl = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""\nheaders = {', metadata={'id': 'documentsFromText/Instagram/content.txt:None:20', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of deploying AI models on edge devices?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

3.1 Storage Per Day
Photos: 60 million photos/day * 3 MB = 180 TeraBytes / day
Videos: 35 million videos/day * 150 MB = 5250 TB / day
Total content size = 180 + 5250 = 5430 TB
The Total Space required for a Year:
5430 TB/day * 365 (days a year) = 1981950 TB = 1981.95 PetaBytes

3.2 Bandwidth Estimation
5430 TB/(24 * 60* 60) = 5430 TB/86400 sec ~= 62.84 GB/s ~= 502.8 Gbps
Incoming bandwidth ~= 502.8 Gbps
Let’s say the ratio of readers to writers is 100:1.
Required outgoing bandwidth ~= 100 * 502.8 Gbps ~= 50.28 Tbps

4. Use Case Diagram for Instagram System Design
uml
Use Case Diagram Instagram

In the above Diagram we have discussed about the use case diagram of Instagram:

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld

---

Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.
11. Conclusion
In this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content",4.603471994400024," Judgement: No

Explanation: The context does not discuss using AI models at the edge, focusing instead on cloud-based scalability for handling large volumes.",7.211982250213623,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='3.1 Storage Per Day\nPhotos: 60 million photos/day * 3 MB = 180 TeraBytes / day\nVideos: 35 million videos/day * 150 MB = 5250 TB / day\nTotal content size = 180 + 5250 = 5430 TB\nThe Total Space required for a Year:\n5430 TB/day * 365 (days a year) = 1981950 TB = 1981.95 PetaBytes\n\n3.2 Bandwidth Estimation\n5430 TB/(24 * 60* 60) = 5430 TB/86400 sec ~= 62.84 GB/s ~= 502.8 Gbps\nIncoming bandwidth ~= 502.8 Gbps\nLet’s say the ratio of readers to writers is 100:1.\nRequired outgoing bandwidth ~= 100 * 502.8 Gbps ~= 50.28 Tbps\n\n4. Use Case Diagram for Instagram System Design\numl\nUse Case Diagram Instagram\n\nIn the above Diagram we have discussed about the use case diagram of Instagram:', metadata={'id': 'documentsFromText/Instagram/content.txt:None:5', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.\n11. Conclusion\nIn this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content', metadata={'id': 'documentsFromText/Instagram/content.txt:None:27', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of adopting a serverless architecture for AI/ML workload processes ?,"API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

Designing Instagram | System Design
Last Updated : 17 Jan, 2024
Designing Instagram is an important topic for system design interview questions. Instagram follows strong Architecture. In this article, we will discuss the architecture of posting photos and videos, following and unfollowing users, liking and disliking posts, searching photos and videos, and generating news feeds.

design-instagram-banner

Important Topics for Instagram System Design

---

10. Scalability for Instagram System Design
Scalability refers to the ability of an organization (or a system, such as a computer network) to perform well under an increased or expanding workload. A system that scales well will be able to maintain or increase its level of performance even as it is tested by larger and larger operational demands.

We can add more servers to application service layers to make the scalability better and handle numerous requests from the clients. We can also increase the number of databases to store the growing users’ data.

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld",4.60428786277771," In judgement, No. The context provided discusses microservices but does not specifically address whether or how the Instagram system utilizes AWS Lambda to handle AI/ML tasks efficiently without managing servers directly.

In Explan) Explain that although there is no explicit mention of using serverless architecture for AI workloads, this approach would potentially offer benefits such as reduced infrastructure management overhead and scalability in response to processing demands, which are essential considerations when optimizing systems like Instagram's post-liking functionality.",8.849667072296143,0,"[Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Designing Instagram | System Design\nLast Updated : 17 Jan, 2024\nDesigning Instagram is an important topic for system design interview questions. Instagram follows strong Architecture. In this article, we will discuss the architecture of posting photos and videos, following and unfollowing users, liking and disliking posts, searching photos and videos, and generating news feeds.\n\ndesign-instagram-banner\n\nImportant Topics for Instagram System Design', metadata={'id': 'documentsFromText/Instagram/content.txt:None:0', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='10. Scalability for Instagram System Design\nScalability refers to the ability of an organization (or a system, such as a computer network) to perform well under an increased or expanding workload. A system that scales well will be able to maintain or increase its level of performance even as it is tested by larger and larger operational demands.\n\nWe can add more servers to application service layers to make the scalability better and handle numerous requests from the clients. We can also increase the number of databases to store the growing users’ data.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:25', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of using efficient file formats like Parquet or any other efficient format?,"Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

Designing Instagram | System Design
Last Updated : 17 Jan, 2024
Designing Instagram is an important topic for system design interview questions. Instagram follows strong Architecture. In this article, we will discuss the architecture of posting photos and videos, following and unfollowing users, liking and disliking posts, searching photos and videos, and generating news feeds.

design-instagram-banner

Important Topics for Instagram System Design

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld

---

Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.
11. Conclusion
In this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content",6.151747941970825," Not applicable
The context does not discuss specific data storage formats, focusing instead on service design for Instagram's functionality.",6.2698140144348145,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Designing Instagram | System Design\nLast Updated : 17 Jan, 2024\nDesigning Instagram is an important topic for system design interview questions. Instagram follows strong Architecture. In this article, we will discuss the architecture of posting photos and videos, following and unfollowing users, liking and disliking posts, searching photos and videos, and generating news feeds.\n\ndesign-instagram-banner\n\nImportant Topics for Instagram System Design', metadata={'id': 'documentsFromText/Instagram/content.txt:None:0', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.\n11. Conclusion\nIn this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content', metadata={'id': 'documentsFromText/Instagram/content.txt:None:27', 'source': 'documentsFromText/Instagram/content.txt'})]"
"Is there any mention of selecting a more energy-efficient AI/ML framework, such as those built on programming languages like C/C++?","Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:

Independently deployable
Loosely coupled
Organized around business capabilities
Owned by a small team
The microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

Post photos and videos: The users can post photos and videos on Instagram.
Follow and unfollow users: The users can follow and unfollow other users on Instagram.
Like or dislike posts: The users can like or dislike posts of the accounts they follow.
Search photos and videos: The users can search photos and videos based on captions and location.
Generate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.
2.2 Non-Functional requirements for Instagram System Design
Scalability: The system should be scalable to handle millions of users in terms of computational resources and storage.
Latency: The latency to generate a news feed should be low.
Availability: The system should be highly available.

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld

---

Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.
11. Conclusion
In this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content",4.452937841415405," Judgement: No

Explanation: The context does not discuss the use of an AI or ML framework for processing images and video content.",6.678911924362183,0,"[Document(page_content='Microservices – also known as the microservice architecture – is an architectural style that structures an application as a collection of services that are:\n\nIndependently deployable\nLoosely coupled\nOrganized around business capabilities\nOwned by a small team\nThe microservice architecture enables an organization to deliver large, complex applications rapidly, frequently, reliably and sustainably – a necessity for competing and winning in today’s world.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:24', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Post photos and videos: The users can post photos and videos on Instagram.\nFollow and unfollow users: The users can follow and unfollow other users on Instagram.\nLike or dislike posts: The users can like or dislike posts of the accounts they follow.\nSearch photos and videos: The users can search photos and videos based on captions and location.\nGenerate news feed: The users can view the news feed consisting of the photos and videos (in chronological order) from all the users they follow.\n2.2 Non-Functional requirements for Instagram System Design\nScalability: The system should be scalable to handle millions of users in terms of computational resources and storage.\nLatency: The latency to generate a news feed should be low.\nAvailability: The system should be highly available.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:3', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.\n11. Conclusion\nIn this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content', metadata={'id': 'documentsFromText/Instagram/content.txt:None:27', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of training AI models in cloud regions with lower carbon intensity?,"These requirements has been covered:
Scalability: We can add more servers to application service layers to make the scalability better and handle numerous requests from the clients. We can also increase the number of databases to store the growing users’ data.
Latency: The use of cache and CDNs have reduced the content fetching time.
Availability: We have made the system available to the users by using the storage and databases that are replicated across the globe.
Durability: We have persistent storage that maintains the backup of the data so any uploaded content (photos and videos) never gets lost.
Consistency: We have used storage like blob stores and databases to keep our data consistent globally.

---

8.1 User:
Table to store user data – Users


{
userId: string[HashKey]
name: string
emailId: string
creationDateInUtc: long
}
8.2 User_Follows:
Table to store follower data – User_follows

{
followingUserId_followerUserId: string [HashKey]
followingUserId: string [RangeKey]
followerUserId: string
creationDateInUtc: long
}
8.3 User Uploads
Table to store user uploads – User_uploads

{
uploadId: string[Hashkey]
userId: string[RangeKey]
imageLocation: string
uploadDateInUtc: long
caption: string
}
8.4 User Feed
Table to store the user feed data – User_feed

---

import requests
 
url_like = f""https://api.instagram.com/media/likes/{media_id}""
url_unlike = f""https://api.instagram.com/media/likes/{media_id}""
headers = {'Authorization': f'Bearer {access_token}'}
 
# Like a post
response_like = requests.post(url_like, headers=headers)
 
# Unlike a post
response_unlike = requests.delete(url_unlike, headers=headers)
7.4 Search photos and videos
Search Endpoint:
Typically a POST request to a /search endpoint.
Query parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)
import requests
 
url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""
headers = {

---

2. Requirements for Instagram System Design
2.1 Functional Requirements for Instagram System Design
In functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld",4.343317985534668," In judgement, Not Applicable. The context provided does not discuss using specific technologies to train AI models in environmentally friendly ways such as selecting less energy-intensive devices or servers for model development and testing processes.",7.582087755203247,0,"[Document(page_content='These requirements has been covered:\nScalability: We can add more servers to application service layers to make the scalability better and handle numerous requests from the clients. We can also increase the number of databases to store the growing users’ data.\nLatency: The use of cache and CDNs have reduced the content fetching time.\nAvailability: We have made the system available to the users by using the storage and databases that are replicated across the globe.\nDurability: We have persistent storage that maintains the backup of the data so any uploaded content (photos and videos) never gets lost.\nConsistency: We have used storage like blob stores and databases to keep our data consistent globally.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:26', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='8.1 User:\nTable to store user data – Users\n\n\n{\nuserId: string[HashKey]\nname: string\nemailId: string\ncreationDateInUtc: long\n}\n8.2 User_Follows:\nTable to store follower data – User_follows\n\n{\nfollowingUserId_followerUserId: string [HashKey]\nfollowingUserId: string [RangeKey]\nfollowerUserId: string\ncreationDateInUtc: long\n}\n8.3 User Uploads\nTable to store user uploads – User_uploads\n\n{\nuploadId: string[Hashkey]\nuserId: string[RangeKey]\nimageLocation: string\nuploadDateInUtc: long\ncaption: string\n}\n8.4 User Feed\nTable to store the user feed data – User_feed', metadata={'id': 'documentsFromText/Instagram/content.txt:None:22', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='import requests\n \nurl_like = f""https://api.instagram.com/media/likes/{media_id}""\nurl_unlike = f""https://api.instagram.com/media/likes/{media_id}""\nheaders = {\'Authorization\': f\'Bearer {access_token}\'}\n \n# Like a post\nresponse_like = requests.post(url_like, headers=headers)\n \n# Unlike a post\nresponse_unlike = requests.delete(url_unlike, headers=headers)\n7.4 Search photos and videos\nSearch Endpoint:\nTypically a POST request to a /search endpoint.\nQuery parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)\nimport requests\n \nurl = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""\nheaders = {', metadata={'id': 'documentsFromText/Instagram/content.txt:None:20', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='2. Requirements for Instagram System Design\n2.1 Functional Requirements for Instagram System Design\nIn functional Requirements, we will not discuss the login or signup page of Instagram. Login and Signup architecture is the same for everyone. We will look for further like posting photos, etc.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:2', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'})]"
Is there any mention of selecting the right hardware or VM instance types?,"Notification Service:
Informs users about relevant events like likes, comments, mentions, and follows.
Pushes notifications to mobile devices through platforms like Firebase Cloud Messaging or Amazon SNS.
Leverages a queueing system for asynchronous notification delivery.
Analytics Service:
Tracks user engagement, post performance, and overall platform usage.
Gathers data on views, likes, comments, shares, and clicks.
Provides insights to improve user experience, optimize content recommendations, and target advertising.
Why we need caching for storing the data?
Cache the data to handle millions of reads. It improves the user experience by making the fetching process fast. We’ll also opt for lazy loading, which minimizes the client’s waiting time.

---

API Endpoints:

GET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.
POST /posts/{post_id}/like: Registers a like for the post by the authenticated user.
POST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.
DELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).
DELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).

---

import requests
 
url_like = f""https://api.instagram.com/media/likes/{media_id}""
url_unlike = f""https://api.instagram.com/media/likes/{media_id}""
headers = {'Authorization': f'Bearer {access_token}'}
 
# Like a post
response_like = requests.post(url_like, headers=headers)
 
# Unlike a post
response_unlike = requests.delete(url_unlike, headers=headers)
7.4 Search photos and videos
Search Endpoint:
Typically a POST request to a /search endpoint.
Query parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)
import requests
 
url = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""
headers = {

---

At a high level, Instagram can be viewed as a system with the following key components and interactions:

design-instagram-hld

---

Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.
11. Conclusion
In this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content",4.623993873596191," In judgement
<Not Applicable>",6.156202077865601,0,"[Document(page_content='Notification Service:\nInforms users about relevant events like likes, comments, mentions, and follows.\nPushes notifications to mobile devices through platforms like Firebase Cloud Messaging or Amazon SNS.\nLeverages a queueing system for asynchronous notification delivery.\nAnalytics Service:\nTracks user engagement, post performance, and overall platform usage.\nGathers data on views, likes, comments, shares, and clicks.\nProvides insights to improve user experience, optimize content recommendations, and target advertising.\nWhy we need caching for storing the data?\nCache the data to handle millions of reads. It improves the user experience by making the fetching process fast. We’ll also opt for lazy loading, which minimizes the client’s waiting time.', metadata={'id': 'documentsFromText/Instagram/content.txt:None:9', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='API Endpoints:\n\nGET /posts/{post_id}: Retrieves details of a post, including the number of likes/dislikes.\nPOST /posts/{post_id}/like: Registers a like for the post by the authenticated user.\nPOST /posts/{post_id}/dislike: Registers a dislike for the post by the authenticated user.\nDELETE /posts/{post_id}/like: Removes the like for the post by the authenticated user (if previously done).\nDELETE /posts/{post_id}/dislike: Removes the dislike for the post by the authenticated user (if previously done).', metadata={'id': 'documentsFromText/Instagram/content.txt:None:19', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='import requests\n \nurl_like = f""https://api.instagram.com/media/likes/{media_id}""\nurl_unlike = f""https://api.instagram.com/media/likes/{media_id}""\nheaders = {\'Authorization\': f\'Bearer {access_token}\'}\n \n# Like a post\nresponse_like = requests.post(url_like, headers=headers)\n \n# Unlike a post\nresponse_unlike = requests.delete(url_unlike, headers=headers)\n7.4 Search photos and videos\nSearch Endpoint:\nTypically a POST request to a /search endpoint.\nQuery parameters include:query: The search term(s), media_type: Filters results by photo, video, or both, Additional filters: date range, location, people, etc. (if supported)\nimport requests\n \nurl = ""https://photoslibrary.googleapis.com/v1/mediaItems:search""\nheaders = {', metadata={'id': 'documentsFromText/Instagram/content.txt:None:20', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='At a high level, Instagram can be viewed as a system with the following key components and interactions:\n\ndesign-instagram-hld', metadata={'id': 'documentsFromText/Instagram/content.txt:None:11', 'source': 'documentsFromText/Instagram/content.txt'}), Document(page_content='Reliability: Our databases handle replication and redundancy, so our system stays reliable and data is not lost. The load balancing layer routes requests around failed servers.\n11. Conclusion\nIn this article we have discussed about instagram design in which how discussed about the save post and videos, like and dislike the post, show feeds, posting the post or videos, how we can put the hashtags. nstagram’s system design is a complex and sophisticated architecture that prioritizes scalability, availability, security, and user experience. The platform’s success is not only attributed to its user-friendly interface but also to the robust backend infrastructure that supports its massive user base and dynamic content', metadata={'id': 'documentsFromText/Instagram/content.txt:None:27', 'source': 'documentsFromText/Instagram/content.txt'})]"
